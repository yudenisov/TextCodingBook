INPUT
Оператор INPUT читает значения с клавиатуры или файла. Оператор LINE INPUT читает строку символов длиной до 255 символов с клавиатуры или файла.
Синтаксис:
	INPUT [;] ["ЗАПРОС"{;|,}] СПИСОК_ПЕРЕМЕННЫХ
	LINE INPUT [;]["ЗАПРОС";] ПЕРЕМЕННАЯ$
	INPUT #ДЕСКРИПТОР%, СПИСОК_ПЕРЕМЕННЫХ
	LINE INPUT #ДЕСКРИПТОР%, ПЕРЕМЕННАЯ$
где
	ЗАПРОС - необязательная литеральная строка, которая высвечивается перед тем, как нужно ввести данные. Точка с запятой после запроса добавляет знак вопроса после строки запроса.
	СПИСОК_ПЕРЕМЕННЫХ -- одна или несколько переменных, разделённых запятыми, в которые вводятся данныес клавиатуры или читаются символы из текстового файла. Переменная может иметь до 40 символов и начинаться с буквы.Допустимые символы в переменной A-Z,0-9 и ".".
	ПЕРЕМЕННАЯ$ -- строковая переменная, которая принимаетв себя строку символов, введёных из клавиатуры или прочитанной из файла.
	ДЕСКРИПТОР% -- номер открытого файла
Описание:
	INPUT использует запятые в качестве разделителей между операндами;
	LINE INPUT читает все символы вплоть до возврата каретки (до нажатия клавиши "Enter", и записывает её в переменную строка для дальнейшей обработке в программе. Никаких форматных преобразований над строкой не осуществляется;
	При вводе с клавиатуры, точка с запятой сразу же после ключевого слова INPUT оставляет текстовый курсор на той же строке после того, как после ввода значения пользователь нажал клавишу "Enter". По умолчанию курсор передвигается в начало новой строки. Это позволяет средствами QUICK BASIC эмулировать ввод в формах а-ля GUI;
	Примечание: При вводе из стандартного потока ввода на экране, в текущей позиции появляется приглашение в виде знака вопроса. После этого приглашения необходимо ввести значение переменной и нажать клавишу "Enter". Если ввод не закончен, в новой строке опять появится знак вопроса. Поэтому, комбинируя вывод значений при помощи оператора PRINT СТРОКА; и INPUT ПЕРЕМЕННАЯ можно получать диалоговые формы ввода значений для их обработки.
	Примечание: При вводе значений из текстового файла оператор читает строку текста, самостоятельно пытаясь преобразовать форматы данных числовых переменных. Если ему это не удаётся, программа аварийно завершается. Поэтому при вводе из файла числовых значений в строке оператора INPUT нужно указывать столько переменных, сколько их записано в строке текстового файла.
	Примечание: При вводе неформатированных символьных данных авторы советуют вместо конструкции: "INPUT ПЕРЕМЕННАЯ$"  использовать конструкции "LINE INPUT ПЕРЕМЕНННАЯ$" или "ПЕРЕМЕННАЯ$ = INPUT$( ЧИСЛО )", поскольку их работа более стабильная и предсказуемая.
	Примечание: Учтите, что в Quick Basic длина строки символов ограничена 255 символами! Это ограничение снято в Visual Basic, за счёт изменения алгоритма представления строк.
	Примечание: Оператор LINE INPUT на языке QUICKBASIC является аналогом оператора "Ромб" языка Perl в скалярном контексте.
	Примечание: Оператору LINE INPUT в GWBASIC существовал парный оператор PRINT LINE, который, однако, не имел никаких преимуществ перед оператором PRINT и вскоре был исключён из спецификации BASIC корпорации Microsoft.

INPUT$
Функция возвращает строку символов, прочитанную из указанного файла.
Синтаксис:
	INPUT$(ЧИСЛО[, #ДЕСКРИПТОР%] )
Описание:
	Функция читает из файла с номером ДЕСКРИПТОР% заданное ЧИСЛО символов и записывает её в символьную переменную. Если параметр ДЕСКРИПТОР опущен, то строка читается из стандартного потока ввода (клавиатуры);

Оператор PRINT
Оператор PRINT записывает данные в файл или отображает их на экране.
Оператор LPRINT печатает данные на принтере, подсоединённому к LPT1.
Синтаксис:
	PRINT [#ДЕСКРИПТОР%, ][ВЫРАЖЕНИЕ][{;|,}]
	LPRINT [ВЫРАЖЕНИЕ][{;|,}]
где
	ДЕСКРИПТОР% -- номер открытого файла. Если дескриптор не указан, вывод производится на экран.
	ВЫРАЖЕНИЕ -- список из одной или более числовых или символьных переменных, литералов или выражений с ними, которые должны быть выведены на экран или в файл.
	Разделитель ";" в конце строки означает, что следующий вывод будет осуществлён сразу же после последнего выведенного знака.
	Разделитель "," в конце строки означает, что вывод начнётся с начала следующей зоныв вывода. 
	Примечание. Зоны вывода имеют длину 14 символов, и их начало можно рассчитать по формуле 14*n+1, где n -- целое число от 0 до 5, являющееся номером зоны.
Описание:
	Оператор PRINT выводит в файл, заданный дескриптором ДЕСКРИПТОР, значения литералов и переменных в соответствии с заданным форматом вывода (см. ниже). Если переменная ДЕСКРИПТОР опущена, то вывод осуществляется в стандартный поток вывода. Если СПИСОК_ВЫВОДА пуст, то в файл или поток вывода записывается символ "Перевод строки". Этот символ также записывается в конец выводимой строки, если ВЫРАЖЕНИЕ не заканчивается знаками "запятая" или "точка с запятой".
	При выводе литералов и переменных из "СПИСКА_ВЫВОДА" используется следующее форматирование. Если после переменной или литерала стоит знак "," ("запятая"), то вывод следующего значения осуществляется в той же строке с ближайшего начала зоны вывода, длиной 14 символов. Таким образом осуществляется вывод наподобие табличных данных. Если же после переменной или литерала стоит знак ";" ("точка с запятой"), то вывод осуществляется в той же строке со следующей позиции, без пропусков и форматирования. В этом случае вывод списка вывода похож на список вывода в PERL.
	Примечание: при выводе в QUICKBASIC также используются конструкции форматированного вывода данных (PRINT USING) и функция для задания точного отступа определённого количества символов (TAB), но эти функции не были популярны даже в эпоху расцвета QUICKBASIC, а теперь вообще практически не используются. Вместо них желательно использовать стандартное форматирование при выводе, формируя формат строки вывода средствами конкатенации.

eof
Синтаксис:
	EOF( ДЕСКРИПТОР% )
Описание:
	Функция проверяет поток, ассоциированный с номером файла ДЕСКРИПТОР%, на признак конца файла. Данная функция возвращает значение True (не ноль), если достигнут конец файла.
	Примечание: обратите внимание, что номер файла ДЕСКРИПТОР% для данной функции записывается без предшествующего знака "решётка" ("#").

open
Открытие файла или устройства
Синтаксис:
	OPEN ФАЙЛ$ [FOR РЕЖИМ ][ACCESS ДОСТУП][РЕЖИМ_БЛОКИРОВКИ] AS #ДЕСКРИПТОР% [LEN=ДЛИНА%]
где
	ФАЙЛ$ -- имя локального файла или устройства DOS. Имя файла может включать название диска и полный путь к файлу.
	Примечание: QUICK Basic не поддерживает обращение к удалённому файлу по URL, поэтому разрешено использовать только файлы на локальных и сетевых дисках. При этом имена файлов необходимо указывать в формате 8.3. В некоторых версиях Windows в качестве имён файлов можно использовать длинные имена, заключённые в двойные кавычки. Но это работает не всегда, и лучше избегать таких "трюков".
	РЕЖИМ -- одно из следующих значений для режима открываемого файла:
* INPUT -- текстовый файл, предназначенный для последовательного ввода данных;
* OUTPUT -- текстовый файл, предназначенный для последовательной записи данных в его начало. Старые данные при этом теряются;
* APPEND -- текстовый файл, предназначенный для записи данных в его конец. Старые данные при этом сохраняются;
* BINARY -- открывается двоичный файл, куда можно писать и считывать данные только операторами PUT и GET соответственно.
* RANDOM -- открывается текстовый файл с произвольным доступом. В этот файл можно записывать и считывать данные из любого местаю Этот режим открытия файлов является режимом по-умолчанию.
	Примечание: работа с двоичными файлами и с файлами произвольного доступа в QUICK BASIC в данном справочнике не рассматривается.
	ДОСТУП -- определяет режим доступа к файлам для сетевых дисков. Может принимать следующие значения:
* READ -- открыть файл только для чтения;
* WRITE -- открыть файл только для записи;
* READ WRITE -- открыть файл только для чтения и записи. Эта опция доступна только для файлов, открытых в режиме BBINARY или RANDOM, а также текстовых файлов, открытых в режиме добавления к ним данных (APPEND);
	РЕЖИМ_БЛОКИРОВКИ -- определяет режим блокировки файла по сети при его совместном использовании. Доступны следующие режимы:
* SHARED -- при открытии файл не блокируется для других процессов. Не рекомендуется использовать, если вы хотите использовать только актуальные данные от законченных транзакций;
* LOCK READ -- при открытии файл становится заблокированным для чтения другими процессами;
* LOCK WRITE -- при открытии файл становиться заблокированным для записи в него другими процессами;
* LOCK READ WRITE -- при открытии файл становится недоступным другим процессам для чтения и записи. Не рекомендуется к использованию, если  есть возможность "смертельных объятий" в системе;
	ДЕСКРИПТОР% -- номер открытого в системе файла. Может принимать значение от 1 до 255.
	ДЛИНА% -- для файлов с произвольной записью определяет длину блока записи (по-умолчанию 128 байт). При последовательном доступе данные записываются в буфер размером по-умолчанию 512 байт.

close
Закрывает один или несколько открытых файлов или устройств.
Синтаксис:
	CLOSE [#ДЕСКРИПТОР%[, #ДЕСКРИПТОР%…]]
Описание:
	Оператор закрывает файлы и устройства, номера которых перечислены в значениях "ДЕСКРИПТОР".
	Оператор, вызванный без аргументов, закрывает все открытые файлы и устройства.

Функция SEEK
Синтаксис:
	SEEK( ДЕСКРИПТОР% )
Описание:
	Функция возвращает текущую позицию файла с номером ДЕСКРИПТОР%.
	Примечание: Для файлов с произвольным доступом позиция представляет собой номер записи. Для файлов с последовательным доступом позиция -- это смещение в байтах от начала файла. Первый байт в файле имеет позицию 1 (в отличие от Си-подобных языков).
Оператор SEEK
Синтаксис:
	SEEK #ДЕСКРИПТОР%, ПОЗИЦИЯ&
Описание:
	Устанавливает в файле с номером "ДЕСКРИПТОР%" текущую позицию для ввода и вывода.
	Примечание: Для файлов с произвольным доступом позиция представляет собой номер записи. Для файлов с последовательным доступом позиция -- это смещение в байтах от начала файла. Первый байт в файле имеет позицию 1 (в отличие от Си-подобных языков).

CHDIR
Синтаксис:
	CHDIR ПУТЬ$
MKDIR
Синтаксис:
	MKDIR ПУТЬ$
RMDIR
Синтаксис:
	RMDIR ПУТЬ$
FILES
Синтаксис:
	FILES [СПЕЦИФИКАЦИЯ_ФАЙЛОВ$]
Описание:
	CHDIR меняет каталог по-умолчанию для диска DOS из программы QUICK BASIC;
	MKDIR создаёт каталог на диске DOS из программы QUICK BASIC;
	RMDIR удаляет пустой каталог на диске DOS из программы QUICK BASIC;
	FILES показывает содержание текущего каталога (имена файлов и подкаталогов в нём) или другого каталога, указанного в переменной СПЕЦИФИКАЦИЯ_ФАЙЛОВ$.
	Здесь ПУТЬ$ указывает путь к каталогу или подкаталогу (регулярные выражения недопустимы). C точки зрения надёжности программы лучше всегда указывать полный путь.
	Переменная СПЕЦИФИКАЦИЯ_ФАЙЛОВ$ может содержать краткое или полное имя файла, с или без буквы диска. Также в имени файла допустимы регулярные выражения. Если переменная опущена, предполагается использование текущего каталога.

LOF
Возвращает длину файла в символах.
Синтаксис:
	LOF( ДЕСКРИПТОР% )
где
	ДЕСКРИПТОР% -- номер открытого файла. Перед номером файла не используется знак "решётка".
	Примечание: функцию LOF удобно использовать для чтения всего файла в переменную, например, в языке VisualBasic, где допускаются строки длиннее 255 байт. Например, в конструкции

STR = Input ( LOF(FileNum), #FileNum )