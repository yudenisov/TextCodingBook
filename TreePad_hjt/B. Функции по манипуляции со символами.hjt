<Treepad version 3.0>
dt=Text
<node>
B. Функции по манипуляции со символами
0
Содержание:
B.1. Удаление конечного символа завершения записи
B.1. Удаление конечного символа завершения записи
B.3. Возвращение символа из кодовой таблицы
B.4. Вычисление шестнадцатеричного числа
B.5. Количество символов в строке
B.6. Преобразование восьмеричного числа
B.7. Десятичный код символа
B.8. Преобразование числа в строку.
B.9. Нестандартные методы
B.9. Нестандартные методы

<end node> 5P9i0s8y19Z
dt=Text
<node>
B.1. Удаление конечного символа завершения записи
1
1. Функция удаляет замыкающий символ завершения записи из каждой строки;
PERL:
chomp
Синтаксис:
	chomp СПИСОК
	chomp
Описание:
	Функция удаляет замыкающий символ завершения записи, определённого значением переменной $/ (по умолчанию – \n), из каждого строкового элемента. Она возвращает общее количество удалённых символов. Список может состоять из одной переменной. При использовании без параметра функция эквивалентна chomp $_ .
Аналогов этой функции в других языках нет.

<end node> 5P9i0s8y19Z
dt=Text
<node>
B.2. Удаление каждого последнего символа из строкового списка
1
2. Функция удаляет последний символ из каждого строкового элемента  списка.
PERL:
chop
Синтаксис:
	chop СПИСОК
	chop
Описание:
	Функция удаляет последний символ из каждого строкового элемента списка. Она возвращает удалённый символ из последнего элемента списка. Список может иметь только одну переменную. Функция эквивалентна вызову chop $_ при использовании без параметров.
Аналогов этой функции в других языках нет.

<end node> 5P9i0s8y19Z
dt=Text
<node>
B.3. Возвращение символа из кодовой таблицы
1
B.3. Функция возвращает символ по заданному числовому коду из таблицы символов;
PERL:
chr
Синтаксис:
	chr ЧИСЛО
	chr
Описание:
	Функция возвращает символ по заданному числовому коду из таблицы символов. При использовании без параметров эквивалентно вызову chr $_ .
VBSCRIPT:
Chr
Синтаксис:
	Chr( ЧИСЛО )
Описание:
Sub Name [( «PARAM» )]
	«Блок процедуры»
End Sub;
PHP:
chr
Синтаксис:
	chr( ЧИСЛО )
Описание:
	Функция возвращает символ по заданному числовому коду из таблицы символов.
JAVASCRIPT:
charCodeAt
Синтаксис:
	СТРОКА.charCodeAt(index)
Описание:
	Метод charCodeAt() возвращает числовое значение Юникода для символа по указанному индексу (за исключением кодовых точек Юникода, больших 0x10000).
	index – Целое число больше, либо равное 0 и меньше длины строки; если параметр не является числом, он устанавливается в 0.
	Кодовые точки Юникода простираются в диапазоне от 0 до 1114111 (0x10FFFF). Первые 128 кодовых точек Юникода напрямую отображаются в кодировку ASCII. Информацию по Юникоду смотрите в Руководстве по JavaScript.
	Обратите внимание, что метод charCodeAt() всегда возвращает значение, меньшее 65536. Так происходит потому, что большие кодовые точки представляются парой (меньших значений) «суррогатных» псевдосимволов, которые используются для составления настоящего символа. Поэтому для того, чтобы получить полный символ для значений символов от 65536 и выше, необходимо получить не только значение charCodeAt(i), но также значение charCodeAt(i + 1) (как если бы строка состояла из двух букв). Смотрите второй и третий примеры ниже.
	Метод charCodeAt() возвращает NaN, если указанный индекс меньше нуля или больше длины строки.
	Обратная совместимость: в более старых версиях (например, в JavaScript 1.2) метод charCodeAt() возвращал число из кодировки ISO-Latin-1 по указанному индексу. Диапазон символов в кодировке ISO-Latin-1 простирается от 0 до 255. Первые 127 чисел напрямую отображаются в кодировку ASCII.
fromCodePoint
Это экспериментальная технология, часть предложения Harmony (ECMAScript 6). Поскольку спецификация этой технологии ещё не стабилизировалась, проверьте таблицу совместимости её использования в различных браузерах. Также обратите внимание, что синтаксис и поведение экспериментальной технологии могут быть изменены в будущих версиях браузеров в соответствии с изменениями в спецификации.
Синтаксис:
	String.fromCodePoint(num1[, …[, numN]])
Описание:
	Статический метод String.fromCodePoint() возвращает строку, созданную из указанной последовательности кодовых точек.
	num1, …, numN – Последовательность кодовых точек. Кодовая точка может записываться в десятичной и шестнадцатеричной нотации.
Выбрасываемые исключения:
	RangeError – Исключение RangeError выбрасывается в случае, если методу предоставлена неверная кодовая точка Юникода (например, «RangeError: NaN is not a valid code point»).
	Поскольку метод fromCodePoint() является статическим методом объекта String, вы всегда должны использовать его как String.fromCodePoint(), а не как метод созданного вами экземпляра String.
fromCharCode
Синтаксис:
	String.fromCharCode(num1[, …[, numN]])
Описание:
	Статический метод String.fromCharCode() возвращает строку, созданную из указанной последовательности значений Юникода.
	num1, …, numN – Последовательность чисел, являющихся значениями Юникода. Числа записываются в десятичной нотации.
	Этот метод возвращает примитивную строку, а не объект String.
	Поскольку метод fromCharCode() является статическим методом объекта String, вы всегда должны использовать его как String.fromCharCode(), а не как метод созданного вами экземпляра String.

<end node> 5P9i0s8y19Z
dt=Text
<node>
B.4. Вычисление шестнадцатеричного числа
1
4. Интерпретирует строковое выражение как шестнадцатеричное число и вычисляет его эквивалент;
PERL:
hex
Синтаксис:
	hex ВЫРАЖЕНИЕ
	hex
Описание:
	Интерпретирует строковое ВЫРАЖЕНИЕ как шестнадцатеричное число и вычисляет его десятичный эквивалент. При использовании без параметров вызов аналогичен вызову hex $_ .
VBSCRIPT:
Hex
Синтаксис:
	Hex( ЧИСЛО )
Описание:
Функция Hex возвращает шестнадцатеричное значение аргумента. Например, Hex(10) возвращает A;
PHP:
hexdec
Синтаксис:
	hexdec( ВЫРАЖЕНИЕ )
Описание:
	Интерпретирует строковое ВЫРАЖЕНИЕ как шестнадцатеричное число и вычисляет его десятичный эквивалент.
Примечание: Эта функция обратна функции dechex. Смотри также функции octdec и bindec.
JAVASCRIPT:
	Такой стандартной функции в языке  нет.

<end node> 5P9i0s8y19Z
dt=Text
<node>
B.5. Количество символов в строке
1
5. Возвращает количество байтов в строке, являющейся значением параметра;
PERL:
length
Синтаксис:
	length ВЫРАЖЕНИЕ
	length
Описание:
	Возвращает количество байтов в строке, являющегося значением параметра ВЫРАЖЕНИЕ. При использовании без параметров функция эквивалентна вызову length $_ .
VBSCRIPT:
Len
Синтаксис:
	Len( СТРОКА )
Описание:
	Функция Len возвращает число символов в строке. Замечание: Пустая строка имеет в VBA количество символов, равное 1;
PHP:
strlen
Синтаксис:
	strlen( СТРОКА )
Описание:
	Возвращает количество символов в строке, являющегося значением параметра СТРОКА.
JAVASCRIPT:
length
Синтаксис:
	СТРОКА.length
Описание:
	Это свойство возвращает количество кодовых значений в строке. В UTF-16, строковом формате, используемом в JavaScript, для представления большинства символов используется одно 16-битное кодовое значение, но для представления не так часто используемых символов требуется два кодовых значения, так что вполне может быть так, что значение, возвращённое свойством length, не будет соответствовать действительному количеству символов в строке.
	Для пустых строк свойство length возвращает 0.
	Статическое свойство String.length возвращает значение 1.

<end node> 5P9i0s8y19Z
dt=Text
<node>
B.6. Преобразование восьмеричного числа
1
6. Интерпретирует строковое выражение как восьмеричное число и  вычисляет его десятичный эквивалент;
PERL:
oct
Синтаксис:
	oct ВЫРАЖЕНИЕ
	oct
Описание:
	Интерпретирует строковое ВЫРАЖЕНИЕ как восьмеричное число и вычисляет его десятичный эквивалент. Если строка начинается с символов 0x, то его содержимое интерпретируется как шестнадцатеричное число. При использовании без параметров вызов функции аналогичен вызову oct $_ .
VBSCRIPT:
Oct
Синтаксис:
	Oct( ЧИСЛО )
Описание:
	Функция Oct возвращает восьмеричное значение аргумента. Например, Oct(10) возвращает 12;
PHP:
octdec
Синтаксис:
	octdec( ВЫРАЖЕНИЕ )
Описание:
	Интерпретирует ВЫРАЖЕНИЕ как восьмеричное число и вычисляет его десятичный эквивалент.
Примечание: Эта функция обратна функции decoct. Смотри также функции hexdec и bindec.
JAVASCRIPT:
	Такой стандартной функции в языке  нет.

<end node> 5P9i0s8y19Z
dt=Text
<node>
B.7. Десятичный код символа
1
7. Возвращает числовой ASCII код первого (или единственного) символа строки;
PERL:
ord
Синтаксис:
	ord ВЫРАЖЕНИЕ
	ord
Описание:
	Возвращает числовой ASCII код первого символа строки, являющегося значением параметра ВЫРАЖЕНИЕ. Вызов функции аналогичен вызову ord $_ при её использовании без параметров.
VBSCRIPT:
Asc
Синтаксис:
	Asc( СИМВОЛ )
	Asc( СТРОКА )
Описание:
Эта функция возвращает ASCII-код символа или первого символа в строке в виде десятичного числа. Например, Asc(«A») возвращает 65, а Asc(«Russia») - 82.
PHP:
ord
Синтаксис:
	ord( ВЫРАЖЕНИЕ )
	ord
Описание:
	Возвращает числовой ASCII код первого символа строки, являющегося значением параметра ВЫРАЖЕНИЕ.
JAVASCRIPT:
charCodeAt
Синтаксис:
	str.charCodeAt( ПОЗИЦИЯ )
Описание:
	Метод возвращает числовое значение Юникода для символа, расположенного по индексу ПОЗИЦИЯ, (за исключением кодовых символов Unicode больших 0x10000);

<end node> 5P9i0s8y19Z
dt=Text
<node>
B.8. Преобразование числа в строку.
1
8. Преобразование числа в строку.
PERL:
	Такой стандартной функции в языке  нет. Тип переменной определяется из контекста.
VBSCRIPT:
CStr
Синтаксис:
	CStr( ЧИСЛО )
Описание:
Функция CStr преобразует переданное ей в качестве аргумента число в вариант с подтипом String. Например, CStr(123.456) возвращает «123.456»;
Str
Синтаксис:
	Str( ЧИСЛО )
Описание:
Эта функция преобразует числовое выражение в строку.
PHP:
	Такой стандартной функции в языке  нет. Тип переменной определяется из контекста.
JAVASCRIPT:
	Такой стандартной функции в языке  нет. Тип переменной определяется из контекста.

<end node> 5P9i0s8y19Z
dt=Text
<node>
B.9. Нестандартные методы
1
B.9.1. Заключение строки в кавычки

JAVASCRIPT:
quote
	Вышла из употребления с версии Gecko 37 (Firefox 37 / Thunderbird 37 / SeaMonkey 2.34), Эта возможность вышла из употребления. Хотя она может продолжать работать в некоторых браузерах, её использование не рекомендуется, поскольку она может быть удалена в любое время. Старайтесь избегать её использования.
	Не стандартно. Эта возможность не является стандартной, и стандартизировать её пока никто не собирается. Не используйте её на сайтах, смотрящих во внешний мир: она будет работать не у всех пользователей. Также могут присутствовать большие несовместимости между реализациями, и её поведение может в будущем измениться.
Синтаксис:
	СТРОКА.quote()
Описание:
	Данная функция обратна функции eval(). Её имеет смысл использовать в диалектах языка, не связанных с веб-программированием (например, для написания скриптовых программ администрирования).
	Нестандартный метод quote() возвращает копию строки, заменяя различные специальные символы в строке их управляющими последовательностями и заключая результат в двойные кавычки (").
	В таблице ниже метод quote() заменяет любые специальные символы и заключает строку в двойные кавычки. Также обратите внимание на третью колонку, в которой функция eval() снова вычисляет управляющие последовательности.
str		str.quote()	eval(str.quote())
Hello world!	"Hello world!"	Hello world!
Hello
    world!	"Hello\n\tworld!"	Hello
    world!
" \ — '		"\" \\ \u2014 '"	" \ — '
Привет, мир!	"\u041F\u0440\u0438\u0432\u0435\u0442, \u043C\u0438\u0440!"	Привет, мир!
	Спецификация не является частью какого-либо стандарта. Реализована в JavaScript 1.3.

B.9.2. Реализация якорей и гиперссылок

JAVASCRIPT:
anchor
Синтаксис:
	СТРОКА.anchor(name)
Описание:
	name – Строка, представляющая атрибут name создаваемого тега.
	Метод anchor() создаёт якорный HTML-элемент <a>, используемый в качестве цели гиперссылки.
	Метод anchor() используется для программного создания и отображения якоря в документе.
	Текстовая строка представляет собой буквальный текст, который Вы хотите показать пользователю. Строковый параметр name представляет атрибут name элемента <a>.
	Якоря, созданные методом anchor(), становятся элементами в массиве document.anchors.
link
Синтаксис:
	СТРОКА.link(url)
Описание:
	url – любая строка, определяющая атрибут href тега <a>; она должна содержать допустимый URL (относительный или абсолютный), символы амперсанда & должны быть закодированы в ней как &amp;, а символы кавычки » — как &quot;
	Метод link() создаёт HTML-элемент <a>, заставляющий строку отображаться в виде ссылки на другой URL.
	Метод link() используется для создания кусочка HTML со ссылкой в гипертексте. Возвращённая строка затем может быть добавлена в документ при помощи метода document.write() или свойства element.innerHTML
	Ссылки, созданные методом link(), становятся элементами в массиве document.links.

<end node> 5P9i0s8y19Z
