<Treepad version 3.0>
dt=Text
<node>
C. Функции манипуляции со строками
0
Содержание:
C.1. Преобразование символов в нижний регистр
C.2. Преобразование символов в верхний регистр
C.3. Сравнение строк
C.4. Конкатенация
C.5. Место вхождения подстроки в строку
C.6. Выделение подстроки в строке
C.7. Разбиение строк в массив строк
C.8. Удаление пробелов
C.9. Форматированный вывод в строку
C.10. Преобразование строки в число
C.11. Шифрование символов
C.12. Упаковка символов в двоичную структуру
C.13. Изменение порядка символов
C.14. Оптимизация регулярных выражений
C.15. Заполнение строк символом

<end node> 5P9i0s8y19Z
dt=Text
<node>
C.1. Преобразование символов в нижний регистр
1
C.1.1. Функция преобразования всех прописных букв строки в строчные буквы;

PERL:
lc
Синтаксис:
	lc ВЫРАЖЕНИЕ,
	lc
Описание:
	Функция преобразует все прописные буквы строкового параметра ВЫРАЖЕНИЕ в строчные буквы и возвращает полученную строку. Она использует текущие локальные установки при преобразовании выражения в случае применения use local. Функция аналогична вызову lc $_, если используется без параметров.

VBSCRIPT:
LCase
Синтаксис:
	LCase( СТРОКА )
Описание:
	Функция преобразует все символы в строке к символам нижнего регистра;

PHP:
strtolower
Синтаксис:
	strtolower( СТРОКА )
Описание:
	Функция переводит все символы в строке в нижний регистр;

JAVASCRIPT:
toLowerCase
Синтаксис:
	СТРОКА.toLowerCase()
Описание:
	Метод toLowerCase() возвращает значение строки СТРОКА, преобразованное в нижний регистр. Метод toLowerCase() не изменяет значение самой строки.
C.1.2. Функция преобразует первый символ строкового параметра в нижний регистр и возвращает полученную строку;

PERL:
lcfirst
Синтаксис:
	lcfirst ВЫРАЖЕНИЕ
	lcfirst
Описание:
	Функция преобразует первый символ строкового параметра ВЫРАЖЕНИЕ в нижний регистр и возвращает полученную строку. Она использует текущие локальные установки при преобразовании выражения в случае применения use local.  Функция аналогична вызову lcfirst $_ , если используется без параметров.

VBSCRIPT:
	Стандартная функция в VBScript не реализована. Пользователь должен создать её сам.

PHP:
	Стандартная функция в PHP не реализована.

JAVASCRIPT
	Стандартный метод в языке не реализован.

<end node> 5P9i0s8y19Z
dt=Text
<node>
C.2. Преобразование символов в верхний регистр
1
C.2.1.. Функция преобразует все строчные буквы строкового параметра в прописные буквы, и возвращает полученную строку;

PERL:
uc
Синтаксис:
	uc ВЫРАЖЕНИЕ,
	uc
Описание:
	Функция преобразует все строчные буквы строкового параметра ВЫРАЖЕНИЕ в прописные буквы и возвращает полученную строку. Она использует текущие локальные установки при преобразовании выражения в случае применения use local.  Функция аналогична вызову uc $_, если используется без параметров.

VBSCRIPT:
UCase
Синтаксис:
	UCase( СТРОКА )
Описание:
	Эта функция используется для преобразования строчных букв в прописные буквы;

PHP:
strtoupper
Синтаксис:
	strtoupper( СТРОКА )
Описание:
	Функция переводит все символы строки в верхний регистр.

JAVASCRIPT:
touppercase
Синтаксис:
	СТРОКА.toUpperCase()
Описание:
	Метод toUpperCase() возвращает значение строки, преобразованное в верхний регистр. Метод toUpperCase() не изменяет значение самой строки.

C.2.2. Функция преобразует первый символ строкового параметра в верхний регистр и возвращает полученную строку;
PERL:
ucfirst
Синтаксис:
	ucfirst ВЫРАЖЕНИЕ
	ucfirst
Описание:
	Функция преобразует первый символ строкового параметра ВЫРАЖЕНИЕ в верхний регистр и возвращает полученную строку. Она использует текущие локальные установки при преобразовании выражения в случае применения use local.  Функция аналогична вызову  ucfirst $_, если используется без параметров.

VBSCRIPT:
	Стандартная функция в VBScript не реализована. Пользователь должен создать её сам.

PHP:
ucfirst
Синтаксис:
	ucfirst( СТРОКА )
Описание:
	Функция делает первый символ в строке $string заглавным, независимо от того, каким он был до этого;
ucwords
Синтаксис:
	ucwords( СТРОКА )
Описание:
	Функция переводит во всех словах в строке их первые буквы в прописные буквы. Аналогов этой функции в других языках нет!

JAVASCRIPT:
	Стандартный метод в языке не реализован.

<end node> 5P9i0s8y19Z
dt=Text
<node>
C.3. Сравнение строк
1
C.3.1. Функция сравнения двух строк между собой;

PERL:
	В языке нет специальных функций для сравнения строк. Вместо них используются строковые бинарные отношения (чувствительные к регистру), указанные ниже.
eq – возвращает ИСТИНА, если две строки бинарно равны;
ne – возвращает ИСТИНА, если две строки бинарно не равны;
lt – ИСТИНА, если левый оператор строго меньше правого;
le – ИСТИНА, если левый оператор меньше или равен правому;
gt – ИСТИНА, если левый оператор больше правого;
ge – ИСТИНА, если левый оператор больше или равен правому;
cmp – 0, если операнды равны;  -1, если левый операнд меньше правого; 1, если левый операнд больше правого.
	Примечание. Используется только бинарное сравнение. Проверка на равенство длины символов проверяется только в операции 'eq'. При сравнении операндов учитываются все коды, в том числе символы-разделители и '\0';

VBSCRIPT:
StrComp
Синтаксис:
	StrComp( СТРОКА1, СТРОКА2, МЕТОД_СРАВНЕНИЯ)
Описание:
	Эта функция используется для сравнения двух строк. После сравнения функция StrComp возвращает 0, если обе строки идентичны, -1, если СТРОКА1 меньше, чем СТРОКА2, и 1 в противном случае. 
	Аргумент МЕТОД_СРАВНЕНИЯ является необязательным и указывает метод сравнения. Если значение этого аргумента равно нулю, выполняется бинарное сравнение (значение по-умолчанию), если значение равно 1, то выполняется сравнение без учёта регистра букв;

PHP:
	В языке нет специальных функций для сравнения строк. Вместо них используются строковые бинарные отношения (чувствительные к регистру), указанные ниже.
== – возвращает ИСТИНА, если две строки бинарно равны;
=== – возвращает ИСТИНА, если две строки бинарно равны и имеют один подтип;
!= – возвращает ИСТИНА, если две строки бинарно не равны;
<> – возвращает ИСТИНА, если две строки бинарно не равны;
!== – возвращает ИСТИНА, если две строки бинарно не равны, или они разного типа;
< – ИСТИНА, если левый оператор строго меньше правого;
<= – ИСТИНА, если левый оператор меньше или равен правому;
> – ИСТИНА, если левый оператор больше правого;
>= – ИСТИНА, если левый оператор больше или равен правому;
	Примечание. Используется только бинарное сравнение. Проверка на равенство длины символов проверяется только в операции 'eq'. При сравнении операндов учитываются все коды, в том числе символы-разделители и '\0';

JAVASCRIPT:
	В языке нет специальных функций для сравнения строк. Вместо них используются строковые бинарные отношения (чувствительные к регистру), указанные ниже.
== – возвращает ИСТИНА, если две строки бинарно равны;
=== – возвращает ИСТИНА, если две строки бинарно равны и имеют один подтип;
!= – возвращает ИСТИНА, если две строки бинарно не равны;
<> – возвращает ИСТИНА, если две строки бинарно не равны;
!== – возвращает ИСТИНА, если две строки бинарно не равны, или они разного типа;
< – ИСТИНА, если левый оператор строго меньше правого;
<= – ИСТИНА, если левый оператор меньше или равен правому;
> – ИСТИНА, если левый оператор больше правого;
>= – ИСТИНА, если левый оператор больше или равен правому;
	Примечание. Используется только бинарное сравнение. Проверка на равенство длины символов проверяется только в операции 'eq'. При сравнении операндов учитываются все коды, в том числе символы-разделители и '\0';

<end node> 5P9i0s8y19Z
dt=Text
<node>
C.4. Конкатенация
1
C.4.1. Конкатенация
JAVASCRIPT:
concat
Синтаксис:
	СТРОКА.concat( СТРОКА1, СТРОКА2, …, СТРОКА_N )
Описание:
	Метод объединяет текст из двух или более строк и возвращает новую строку. При этом меняется только строка СТРОКА, на остальные строки это действие не оказывает4
	Примечание: конкатенация строк в JavaScript также осуществляется при помощи оператора «+», и во многих случаях его использование предпочтительнее;
	Примечание: для добавления к концу строки символьного выражения можно использовать выражение «+=», со значением таким же, как на языке Си;

C.4.2. Операторы конкатенации в разных языках:

PERL:
Оператором конкатенации является зкак «.» («точка»).
Синтаксис:
	«Переменная или литерал».«переменнаая или литерал»
	При необходимости в выражении может быть несколько операторов конкатенации, объединённых в цепочку. Использование скобок с этим оператором не разрешается.
	Примечание: в левой части выражения присваивания операции конкатенапции может быть только переменная. Левую часть можно опустить, если операция конкатенации используется в операторе вывода.

VBSCRIPT:
Оператором конкатенации является зкак «&» («амперсант»).
Синтаксис:
	«Переменная или литерал» & «переменнаая или литерал»
	При необходимости в выражении может быть несколько операторов конкатенации, объединённых в цепочку. Использование скобок с этим оператором не разрешается.
	Примечание: в левой части выражения присваивания операции конкатенапции может быть только переменная. Левую часть можно опустить, если операция конкатенации используется в операторе вывода.
	Примечание: в Quick Basic в операциях конкатенации использовался знак "Плюс" ("+"). Это существенное различие между Quick Basic и Visual Basic нужно учитывать при написании программ.

PHP:
Оператором конкатенации является зкак «+» («плюс»).
Синтаксис:
	«Переменная или литерал» + «переменнаая или литерал»
	При необходимости в выражении может быть несколько операторов конкатенации, объединённых в цепочку. Использование скобок с этим оператором не разрешается.
	Примечание: в левой части выражения присваивания операции конкатенапции может быть только переменная. Левую часть можно опустить, если операция конкатенации используется в операторе вывода.

VBSCRIPT:
Оператором конкатенации является зкак «+» («плюс»).
Синтаксис:
	«Переменная или литерал» + «переменнаая или литерал»
	При необходимости в выражении может быть несколько операторов конкатенации, объединённых в цепочку. Использование скобок с этим оператором не разрешается.
	Примечание: в левой части выражения присваивания операции конкатенапции может быть только переменная. Левую часть можно опустить, если операция конкатенации используется в операторе вывода.

<end node> 5P9i0s8y19Z
dt=Text
<node>
C.5. Место вхождения подстроки в строку
1
C.5.1. Функция возвращает позицию первого вхождения указанной подстроки в строке текста:

PERL:
index
Синтаксис:
	index СТРОКА, ПОДСТРОКА[, ПОЗИЦИЯ]
Описание:
	Функция возвращает позицию первого вхождения указанной подстроки в заданную параметром СТРОКА строку, или «-1», если подстрока не найдена. Если задан параметр ПОЗИЦИЯ, то поиск начинается с заданной позиции в строке (нумерация символов в строке начинается с «0»).

VBSCRIPT:
InStr
Синтаксис:
	InStr( НАЧ_ПОЗИЦИЯ, СТРОКА1, СТРОКА2, ТИП_СРАВНЕНИЯ )
Описание:
	Функция InStr используется для получения местоположения одной строки внутри другой.
«	НАЧ_ПОЗИЦИЯ - необязательный аргумент, задающий начальную позицию текста;
«	СТРОКА1 - строка, в которой производится поиск;
«	СТРОКА2 - искомая строка;
«	ТИП_СРАВНЕНИЯ - необязательный документ, задающий способ сравнения. 0 - бинарное сравнение, 1 - сравнение с игнорированием регистров символов. По-умолчанию используется 0.

PHP:
	Автору не известно существование такой стандартной функции в PHP;

JAVASCRIPT:
indexOf
Синтаксис:
	СТРОКА.indexOf( ПОДСТРОКА[, НАЧ_ПОЗИЦИЯ] )
Описание:
	Функция возвращает позицию первого вхождения указанной подстроки ПОДСТРОКА в заданную параметром СТРОКА строку, или «-1», если подстрока не найдена. Если задан параметр ПОЗИЦИЯ, то поиск начинается с заданной позиции в строке (нумерация символов в строке начинается с «0»). Данная функция является регистрозависимой.

C.5.2. Функция возвращает позицию последнего вхождения  указанной подстроки в заданную строку;

PERL:
rindex
Синтаксис:
	rindex СТРОКА, ПОДСТРОКА[, ПОЗИЦИЯ]
Описание:
	Функция возвращает позицию последнего вхождения указанной подстроки в строку, которая задана СТРОКА, или «-1», если подстрока не найдена. Если задан параметр ПОЗИЦИЯ, то поиск начинается перед заданной позицией в строке (включая символ в этой позиции).

VBSCRIPT:
	В данном языке нет такой стандартной функции. Пользователь должен реализовать её сам;

PHP:
	Автору не известно существование такой стандартной функции в PHP;

JAVASCRIPT:
lastIndexOf
Синтаксис:
	СТРОКА.lastIndexOf( ПОДСТРОКА[, НАЧ_ПОЗИЦИЯ] )
Описание:
	Функция возвращает позицию последнего вхождения указанной подстроки ПОДСТРОКА в заданную параметром СТРОКА строку, или «-1», если подстрока не найдена. Если задан параметр ПОЗИЦИЯ, то поиск начинается с заданной позиции в строке (нумерация символов в строке начинается с «0»). Данная функция является регистрозависимой.

<end node> 5P9i0s8y19Z
dt=Text
<node>
C.6. Выделение подстроки в строке
1
C.6.1. Функция находит и возвращает подстроку длиной, равной длиной параметра ДЛИНА с позиции, заданной параметром СМЕЩЕНИЕ, из параметра СТРОКА;
Примечание. Иногда эта функция используется (хороший тон) для обрезки введённой пользователем строки до заданной длины.

PERL:
substr
Синтаксис:
	substr СТРОКА, СМЕЩЕНИЕ[, ДЛИНА[, ЗАМЕЩЕНИЕ]]
Описание:
	Функция находит и возвращает подстроку длиной, равной значению параметра ДЛИНА, из параметра СТРОКА, начиная с символа, заданного параметром СМЕЩЕНИЕ. Если значение СМЕЩЕНИЕ отрицательное, то извлечение начинается с последнего символа строки. Если значение ДЛИНА отрицательное, то от конца строки отсекаются количество символов, которое равно абсолютному значению этого параметра. Если задан строковый параметр ЗАМЕЩЕНИЕ, то найденная подстрока замещается ею в параметре СТРОКА, который в этом случае должен быть l-Значением.

VBSCRIPT:
	Существует несколько функций для реализации такого функционала:
Left
Синтаксис:
	Left( СТРОКА, ЧИСЛО )
Описание:
	Функция Left возвращает определённое число символов из строки. Например, Left("VBScript for Internet", 8) возвращает "VBScript"
Mid
Синтаксис:
	Mid( НАЧ_СТРОКА, ПОЗИЦИЯ, ДЛИНА_НОВ_СТРОКИ )
Описание:
	Возвращает определённое число символов строки. Например, Mid("VBScript for Internet", 1, 8) возвращает "VBScript".
Right
Синтаксис:
	Right( СТРОКА, ЧИСЛО )
Описание:
	Функция Right возвращает определённое число символов с правой стороны строки. Например, Right("VBScript", 6) возвращает "Script";
Оператор MID
Синтаксис:
	MID( СТРОКОВАЯ_ПЕРЕМЕННАЯ, ПОЗИЦИЯ[, ДЛИНА]) = EXPR
	СТРОКОВАЯ_ПЕРЕМЕННАЯ – переменная, модифицируемая оператором MID. Передаётся по ссылке.
	ПОЗИЦИЯ – начальная позиция строки в строковой переменной, с которой происходит замена значения выбранной переменной;
	EXPR – строковое выражение, значение которого используется при вставке в строковую переменную;
	ДЛИНА – количество заменяемых символов в строке. Если параметр опущен, производится замена всех символов от начальной позиции до конца строки;
Описание:
	Оператор MID заменяет часть строки в переменной на другую строку;

PHP:
substr:
Синтаксис:
	substr( СТРОКА, НАЧ_ПОЗИЦИЯ[, ДЛИНА] )
Описание:
	Функция возвращает из строки СТРОКА подстроку символов длиной ДЛИНА (по-умолчанию – до конца строки), начиная с символа НАЧ_ПОЗИЦИЯ;
	Примечание. Нумерация символов начинается с нуля до «количества символов» - 1. Если НАЧ_ПОЗИЦИЯ положительная, то символ отсчитывается от начала строки, иначе – с конца строки. Если ДЛИНА положительная, то строка расширяется вправо, иначе – влево от начального символа. Примеры:
$str = "abcdef";
substr( $str, 1 ); // вернёт "bcdef"
substr( $str, 1, 3 ); // вернёт "bcd"
substr( $str, -1 ); // вернёт "f"
substr( $str, -2 ); // вернёт "ef"
substr( $str, -3, 1 ); // вернёт "d"
substr( $str, -1, -1 ); // вернёт "bcde"
JAVASCRIPT:
substr
Синтаксис:
	СТРОКА.substr(НАЧ_ПОЗИЦИЯ[, ДЛИНА])
Описание:
	Метод substr() возвращает указанное количество символов из строки, начиная с указанной позиции.
	Параметр НАЧ_ПОЗИЦИЯ является индексом символа. Индекс первого символа равен 0, а последнего символа — на один меньше длины строки. Метод substr() начинает извлекать символы начиная с позиции НАЧ_ПОЗИЦИЯ и собирая ДЛИНА символов (если он не достигнет раньше конца строки, в этом случае будет возвращено меньшее количество символов).
	Если параметр НАЧ_ПОЗИЦИЯ является положительным и он больше, либо равен длине строки, метод substr() вернёт пустую строку.
	Если параметр НАЧ_ПОЗИЦИЯ является отрицательным, метод substr() используется его как индекс символа, начиная с конца строки. Если параметр НАЧ_ПОЗИЦИЯ отрицателен и по модулю больше длины строки, метод substr() будет использовать 0 в качестве начального индекса. Обратите внимание: описанная обработка отрицательных значений аргумента НАЧ_ПОЗИЦИЯ не поддерживается JScript от Microsoft.
	Если параметр ДЛИНА равен нулю или отрицателен, метод substr() вернёт пустую строку. Если параметр ДЛИНА опущен, метод substr() извлечёт все символы до конца строки.
substring
Синтаксис:
	СТРОКА.substring(ИндексA[, ИндексB])
Описание:
	Метод substring() возвращает подстроку строки между двумя индексами, или от одного индекса и до конца строки.
	ИндексA –Целое число от 0 до длины строки, определяющее смещение в строке первого символа, который будет включён в результирующую подстроку.
	ИндексB – Необязательный параметр. Целое число от 0 до длины строки, определяющее смещение в строке первого символа, который не будет включён в результирующую подстроку.
	Метод substring() извлекает символы, начиная с индекса ИндексA до, но не включая, индекс ИндексB. В частности:
* Если аргумент ИндексA равен аргументу ИндексB, метод substring() вернёт пустую строку.
* Если аргумент ИндексB опущен, метод substring() извлечёт символы до конца строки.
* Если любой из аргументов меньше, либо равен нулю или равен NaN, он будет трактоваться как равный 0.
* Если любой из аргументов больше, чем длина указанной строки, он будет трактоваться как равный длине указанного строкового типа.
* Если аргумент ИндексA будет больше аргумента ИндексB, то метод substring() сработает так, как если бы аргументы были поменяны местами; например, СТРОКА.substring(1, 0) == СТРОКА.substring(0, 1).

C.6.2. Возвращает символ по указанному индексу в строке (charAt)

JAVASCRIPT:
charAt
Синтаксис:
	СТРОКА.charAt( ПОЗИЦИЯ )
Описание:
	Данный метод возвращает символ из строки СТРОКА, находящемуся по индексу ПОЗИЦИЯ. Нумерация символов в строке начинается с нуля.
Оператор Индекс (новое в JavaScript)
Синтаксис:
	СТРОКА[ПОЗИЦИЯ]
Описание:
	Способ (введённый в ECMAScript 5) рассматривает строки как массивоподобные объекты, в котором символы имеют соответствующие числовые индексы. Позиция первого символа равно нулю, а последнего – длине строки минус единица.
	При доступе к символам посредством нотации с квадратными скобками, попытка удалить символ, или присвоить значение числовому свойству закончится неудачей, поскольку эти свойства являются незаписываемыми и ненастраиваемыми.

<end node> 5P9i0s8y19Z
dt=Text
<node>
C.7. Разбиение строк в массив строк
1
C.7.1. Функция разбивает строку, которая является значением параметра ВЫРАЖЕНИЕ, на массив строк, с использованием разделителя, определённым регулярным выражением ОБРАЗЕЦ.
Примечание: Функция split является антагонистом функции join. Она используется, например, для преобразования файла, который загружён единым целым, в массив строк;

PERL:
split
Синтаксис:
	split /ОБРАЗЕЦ/[.ВЫРАЖЕНИЕ[.ПРЕДЕЛ]]
	split
Описание:
	Функция разбивает строку, которая является значением параметра: ВЫРАЖЕНИЕ, на массив строк. При этом она использует  разделитель, который определяется регулярным выражением в параметре: ОБРАЗЕЦ. Функция возвращает полученный массив в списковом контексте. Функция возвращает количество найденных строк разбиения в скалярном контексте. 
	Если параметр ПРЕДЕЛ задан, то функция разбивает ВЫРАЖЕНИЕ не более чем на заданное этим параметром число строк. Если параметр: ВЫРАЖЕНИЕ – не задан, то используется внутренняя специальная переменная интерпретатора Perl $_. Если образец не задан, то функция разбивает ВЫРАЖЕНИЕ по пробельным символам. Функция эквивалентна split /\s+/ при использовании без параметра. $_. Операция split — антагонист операции: join.

VBSCRIPT:
	Стандартная функция в VBScript не реализована. Пользователь должен создать её сам.
PHP:
split
Синтаксис:
	split( ОБРАЗЕЦ, СТРОКА[, ПРЕДЕЛ] )
Описание:
	Функция разбивает строку, которая является значением параметра: СТРОКА, на массив строк. При этом она использует  разделитель, который определяется регулярным выражением в параметре: ОБРАЗЕЦ.
Пример:
<?php
// Delimiters may be slash, dot, or hyphen
$date = "04/30/1973";
list($month, $day, $year) = split('[/.-]', $date);
echo "Month: $month; Day: $day; Year: $year<br />\n";
?>

VBSCRIPT:
	В стандартном подмножестве языка данная функция не реализована.

JAVASCRIPT:
split
Синтаксис:
	СТРОКА.split([separator[, limit]])
Описание:
* separator – необязательный параметр. Указывает символы, используемые в качестве разделителя внутри строки. Параметр separator может быть как строкой, так и регулярным выражением. Если параметр опущен, возвращённый массив будет содержать один элемент со всей строкой. Если параметр равен пустой строке, строка str будет преобразована в массив символов.
* limit – необязательный параметр. Целое число, определяющее ограничение на количество найденных подстрок. Метод split() всё равно разделяет строку на каждом сопоставлении с разделителем separator, но обрезает возвращаемый массив так, чтобы он содержал не более limit элементов.
	Метод split() возвращает новый массив.
	Если разделитель separator найден, он удаляется из строки, а подстроки возвращаются в массиве. Если разделитель опущен, массив будет содержать только один, состоящий из всей строки. Если разделитель является пустой строкой, строка str будет преобразована в массив символов.
	Если разделитель является регулярным выражением, содержащим подгруппы, то каждый раз при сопоставлении с разделителем, результаты (включая те, что не определены) захвата подгруппы будут помещаться внутрь выходного массива. Однако не все браузеры поддерживают эту возможность.
	Примечание: Если строка является пустой строкой, метод split() вернёт массив, состоящий из одной пустой строки, а не пустой массив.

<end node> 5P9i0s8y19Z
dt=Text
<node>
C.8. Удаление пробелов
1
C.8.1. Функции удаления лишних пробелов из строки;
Примечание:
	Эти функции желательно использовать перед операциями сравнения и форматирования строк при записи в файл, а также сразу после чтения строк из текстового файла.

PERL:
	Данная стандартная функция в Perl не реализована. Вместе неё используйте регулярные выражения для замены и удаления текста.
	Для удаления только одного символа в конце или только последнего символа «\n» используйте функции chop и chomp.

VBSCRIPT:
LTrim, Rtrim, Trim
Синтаксис:
	LTrim( СТРОКА )
	RTrim( СТРОКА )
	Trim( СТРОКА )
Описание:
	Эти функции удаляют лишние пробелы из строки. Функция LTrim удаляет предшествующие пробелы, RTrim - последующие, а Trim - и предшествующие, и последующие;
Внимание! Функции удаления дубликатов символьных разделителей внутри текстовой строки в VBSCRIPT не реализована.

PHP:
ltrim
Синтаксис:
	ltrim( СТРОКА )
Описание:
	Функция удаляет из строки начальные пробелы;
rtrim
Синтаксис:
	rtrim( СТРОКА )
Описание:
	Функция удаляет из строки концевые пробелы;
trim
Синтаксис:
	trim( СТРОКА )
Описание:
	Функция удаляет из строки начальные и концевые пробелы;

JAVASCRIPT:
trim
Синтаксис:
	СТРОКА.trim()
Описание:
	Метод trim() удаляет пробельные символы с начала и конца строки. Пробельными символами в этом контексте считаются все собственно пробельные символы (пробел, табуляция, неразрывный пробел и прочие) и все символы конца строки (LF, CR и прочие).
	Метод trim() возвращает строку с вырезанными пробельными символами с её концов. Метод trim() не изменяет значение самой строки.
trimLeft
Не стандартно
Эта возможность не является стандартной, и стандартизировать её пока никто не собирается. Не используйте её на сайтах, смотрящих во внешний мир: она будет работать не у всех пользователей. Также могут присутствовать большие несовместимости между реализациями, и её поведение может в будущем измениться.
Синтаксис:
	СТРОКА.trimLeft()
Описание:
	Метод trimLeft() возвращает строку с вырезанными пробельными символами с её левого конца. Метод trimLeft() не изменяет значение самой строки.
trimRight
Не стандартно
Эта возможность не является стандартной, и стандартизировать её пока никто не собирается. Не используйте её на сайтах, смотрящих во внешний мир: она будет работать не у всех пользователей. Также могут присутствовать большие несовместимости между реализациями, и её поведение может в будущем измениться.
Синтаксис:
	СТРОКА.trimRight()
Описание:
	Метод trimRight() возвращает строку с вырезанными пробельными символами с её правого конца. Метод trimRight() не изменяет значение самой строки.

C.8.2. chop

PERL:
Синтаксис:
	chop( СТРОКА )
Описание:
	Функция удаляет из строки все повторяющиеся пробелы;
В других языках подобной функции нет. Её функционал необходимо реализовать с помощью регулярных выражений.

<end node> 5P9i0s8y19Z
dt=Text
<node>
C.9. Форматированный вывод в строку
1
C.9.1. Функция возвращает строку, которая представляет собой вывод по формату списка значений в соответствии с заданной строкой формата (как функция Си sprintf);

PERL:
sprintf
Синтаксис:
	sprintf ФОРМАТ, СПИСОК
Описание:
	Функция возвращает строку, которая представляет собой вывод списка значений, который определён параметром СПИСОК, в соответствии с заданной параметром ФОРМАТ строкой формата. Символы форматирования соответствуют функции форматирования языка Си printf.

VBSCRIPT:
	В данном языке нет такой стандартной функции. Форматированный вывод в Бейсике реализуется посредством сторонних библиотек;

PHP:
sprintf
Синтаксис:
	sprintf( ФОРМАТ[, АРГУМЕНТЫ…] )
Описание:
	Функция возвращает строку, которая представляет собой вывод списка значений, определённый параметром АРГУМЕНТЫ, в соответствии с заданной параметром ФОРМАТ строкой формата. Символы форматирования соответствуют функции форматирования языка Си printf.

JAVASCRIPT:
	В данном языке нет такой стандартной функции. Форматированный вывод на JavaScript реализуется программистом самостоятельно.

<end node> 5P9i0s8y19Z
dt=Text
<node>
C.10. Преобразование строки в число
1
C.10.1. Функция для преобразования строчного значения в цифровое значение;

PERL:
	Такой функции в языке нет. Тип переменной определяется из контекста.

VBSCRIPT:
Val
Синтаксис:
	Val( СТРОКА )
Описание:
Эта функция может использоваться для преобразования строчного значения в цифровое значение. Например, функция Val с аргументом: «1234 - это число» вернёт число 1234;

PHP:
	Такой функции в языке нет. Тип переменной определяется из контекста.

JAVASCRIPT:
	Такой функции в языке нет. Тип переменной определяется из контекста.

<end node> 5P9i0s8y19Z
dt=Text
<node>
C.11. Шифрование символов
1
C.11.1. Функция шифрует текст с использованием заданного параметра шифра (например, при создании хеш-функции при аутенфикации).
	Примечание: обратная расшифровка не предусмотрена.

PERL:
crypt
Синтаксис:
	crypt ТЕКСТ, ШИФР
Описание:
	Функция шифрует ТЕКСТ с использованием заданного параметра шифра. Обратной функции дешифровки не существует.

VBSCRIPT:
	Автору такая функция не известна. Скорее всего, она не применяется в веб-разработке.

PHP:
	Автору такая функция не известна.

JAVASCRIPT:
	Автору такая функция не известна. Скорее всего, она не применяется в веб-разработке.

<end node> 5P9i0s8y19Z
dt=Text
<node>
C.12. Упаковка символов в двоичную структуру
1
C.12.1. Упаковка массива или списка значений в двоичную структуру в соответствии с заданным шаблоном;

PERL:
pack
Синтаксис:
	pack ШАБЛОН, СПИСОК
Описание:
	Функция упаковывает массив или список значений в двоичную структуру в соответствии с заданным шаблоном. Шаблон представляет собой последовательность символов, которые задают порядок и тип значений. Функция возвращает строку, содержащую полученную структуру.

VBSCRIPT:
	Автору такая функция не известна. Скорее всего, она не применяется в веб-разработке.

PHP:
	Автору такая функция не известна.
JAVASCRIPT:
	Автору такая функция не известна.

<end node> 5P9i0s8y19Z
dt=Text
<node>
C.13. Изменение порядка символов
1
C.13.1. Возвращает список значений, состоящий из символов строки, которые расположены в обратном порядке;

PERL:
reverse
Синтаксис:
	reverse СПИСОК
Описание:
	(В скалярном контексте) соединяет все элементы списка в одну строку, которая состоит из символов полученной строки, но в обратном порядке.

VBSCRIPT:
	В данном языке нет такой стандартной функции. Пользователь должен реализовать её сам;

PHP:
	Автору такая функция не известна.

JAVASCRIPT:
	В данном языке нет такой стандартной функции. Пользователь должен реализовать её сам;

<end node> 5P9i0s8y19Z
dt=Text
<node>
C.14. Оптимизация регулярных выражений
1
C.14.1 Функция оптимизирует строковые данные параметра ВЫРАЖЕНИЯ – для дальнейшего использования  в повторных операциях поиска по образцу;
Примечание: Функция может сэкономить время выполнения Perl скрипта при повторных операциях поиска по образцу.

PERL:
study
Синтаксис:
	study ВЫРАЖЕНИЕ
	study
Описание:
	Функция оптимизирует строковые данные параметра: ВЫРАЖЕНИЕ – для дальнейшего использования в повторных операциях поиска по образцу. Она сможет сэкономить время выполнения программы в цикле с несколькими операциями поиска. Функция эквивалентна выражению: study $_ при использовании без параметров.

VBSCRIPT:
	Стандартная функция в VBScript не реализована. Пользователь должен создать её сам.

PHP:
	Стандартная функция в PHP не реализована.

JAVASCRIPT:
	Стандартная функция в JAVASCRIPT не реализована.

<end node> 5P9i0s8y19Z
dt=Text
<node>
C.15. Заполнение строк символом
1
C.15.1. Функция заполнения строки определённым числом символов;

PERL:
	Стандартная функция в языке не реализована. Пользователь должен создать её сам.

VBSCRIPT:
String
Синтаксис:
	String( ЧИСЛО, СИМВОЛ )
Описание:
Эта функция используется для заполнения строки определённым числом символов. Например, String(10, «A») вернёт строку «AAAAAAAAAA»;

PHP:
	Стандартная функция в языке не реализована. Пользователь должен создать её сам.

JAVASCRIPT:
repeat
Это экспериментальная технология, часть предложения Harmony (ECMAScript 6). Поскольку спецификация этой технологии ещё не стабилизировалась, проверьте таблицу совместимости её использования в различных браузерах. Также обратите внимание, что синтаксис и поведение экспериментальной технологии могут быть изменены в будущих версиях браузеров в соответствии с изменениями в спецификации.
Синтаксис:
	СТРОКА.repeat(ЧИСЛО)
Описание:
	Метод repeat() конструирует и возвращает новую строку, содержащую указанное количество соединённых вместе копий строки, на которой он был вызван.
	Параметры
* ЧИСЛО – Целое число от 0 до +беск: [0, +беск), определяющее число повторений строки во вновь создаваемой и возвращаемой строке.
	Выбрасываемые исключения
* RangeError – Число повторений должно быть положительным и меньше бесконечности.

<end node> 5P9i0s8y19Z
