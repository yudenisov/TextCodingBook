2. Диалоговые элементы 
-----------------------

В JavaScript поддерживается работа со следующими диалоговыми элементами интерфейса:

Alert.
Применяется для уведомления пользователя, работающего с веб-браузером.

Синтаксис:

alert("сообщение");

Confirm.
Применяется для выбора пользователем одного из двух вариантов ответа "Да/Нет". Соответственно Confirm возвращает значение true/false.

Синтаксис:

confirm("вопрос");

Prompt.
Применяется для ввода пользователем значения. При нажатии "OK" возвращается введенное значение, в случае "Cancel" возвращается значение null.

Синтаксис:

prompt("вопрос/запрос","значение по умолчанию");

Ниже приводится код веб-страницы, в которой пользователь имеет возможность выбрать цвет текста с помощью диалогового элемента.

<html>
<body> 
// здесь будет отображаться текст
<div id="c" style="color:blue">Вы выбрали цвет текста: черный</div> 
<script language="JavaScript"> 
// пользователь выбирает цвет текста 
var tcolor = prompt("Выберите цвет текста: red, blue, green, yellow, black","black");
// задается текст 
document.getElementById("c").innerHTML = "Вы выбрали цвет текста: " + tcolor; // задается цвет текста
document.getElementById("c").style.color = tcolor;</script>
</body>
</html>

Обработка событий в JavaScript
---------------------------------

Атрибут
Описание

onabort
Прерванная загрузка изображения

onblur
утрата фокуса элементом

onchange
Изменение содержимого в поле ввода

onclick
Щелчок мыши на объекте

ondblclick
Двойной щелчок мыши на объекте

onerror
Ошибка при загрузке изображения или документа

onfocus
Получение фокуса элементом

onkeydown
Нажатие клавиши

onkeypress
Клавиша нажата

onkeyup
Отжатие клавиши

onload
Завершение загрузки страницы или изображения

onmousedown
Нажатие кнопки мыши

onmousemove
Перемещение курсора мыши

onmouseout
Смещение курсора мыши с объекта

onmouseover
Наведение курсора мыши на объект

onmouseup
Отжатие кнопки мыши

onreset
Кнопка "Reset" нажата

onresize
Изменение размера окна

onselect
Выделение текста

onsubmit
Кнопка "Submit" нажата

onunload
Уход с веб-страницы

Использование регулярных выражений в JavaScript
--------------------------------------------------


При поиске по тексту можно использовать шаблон, описывающий подстроку. В JavaScript такой шаблон может быть описан с помощью объекта RegExp . В простейшем случае такой шаблон описывает отдельный символ, однако имеет смысл его использовать для регулярных выражений.

Следующий ниже код описывает RegExp объект с именем pttn , содержащий регулярное выражение, описывающее целое десятичное число:

var pattn = new RegExp("/[0-9]+/");

Объект RegExp имеет 3 встроенных метода: test() , exec() и compile() .

Метод test()
выполняет поиск по шаблону:
var pattn = new RegExp("[0-9]+"); document.write(pattn.test("38 попугаев"));

Результат: true

Метод exec()
выполняет поиск подстроки по шаблону и возвращает найденные соответствия; если соответствий нет, возвращается значение null:
var pattn=new RegExp("[0-9]+"); document.write(pattn.exec("38 попугаев"));

Результат: 38

Если необходимо найти все соответствия, то при вызове конструктора RegExp следует указать дополнительный параметр "g", указывающий на
необходимость глобального поиска.

Метод compile()
применяется для изменения ранее созданного шаблона.
Пример 4

var pattn = new RegExp("[0-5]+"); document.write(pattn.exec("38 попугаев")); pattn.compile("[6-9]+"); document.write(";" +
pattn.exec("38 попугаев"));

Результат: 3;8

