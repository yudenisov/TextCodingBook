<Treepad version 3.0>
dt=Text
<node>
E. Функции по текстовому вводу-выводу
0
Содержание

E.1. Вывод данных
E.2. Чтение строк
E.3. Тест на конец файла
E.4. Следующий символ из файла
E.5. Вывод всплывающих сообщений
E.6. Ввод данных из диалогового окна
E.7. Функции вывода непосредственно в DOM (=)
E.8. Установка и чтение текущей позиции файла
E.9. Вывод  в стандартный поток ошибок
E.10. Чтение в двоичном режиме
E.11. Генерирование исключительных ситуаций
E.12. Номер дескриптора (в Perl fileno)
E.13. Изменение длины файла

<end node> 5P9i0s8y19Z
dt=Text
<node>
E.1. Вывод данных
1
E.1.1. Объявляет формат для функции вывода
PERL:
format
Синтаксис:
	format
Описание:
	Объявляет формат, используемый для вывода функцией: write().
В других языках подобной функции нет.
E.1.2. Вывод неформатированного списка строковых данных в файл;
	Примечание: в этих функциях на языках PERL, PHP и JAVASCRIPT всё-таки есть возможность вывода с минимальным форматированием. Дело в том, что если при выводе литерала в нём указать имя переменной, то при выводе этого литерала вместо имени переменной подставится его значение. 
	Например, пусть значение переменной $String равно «Значение». Тогда вывод литерала, например, в PERL:
PRINT «Значение переменной String равно $String»
Выведет не этот литерал, а строку:
«Значение переменной String равно Значение».
	В QUICKBASIC это не так, о чём смотри соответствующее описание оператора.

PERL:
print
Синтаксис:
	print ДЕСКРИПТОР СПИСОК
	print СПИСОК
	print
Описание:
	Выводит список строковых данных в файл, связанный с дескриптором: ДЕСКРИПТОР. Если этот параметр опущен, то вывод осуществляется в стандартный файл вывода STDOUT, или текущий файл, установленный функцией select(). Если отсутствует параметр: СПИСОК, то выводится содержимое специальной переменной: $_.

QUICKBASIC:
Оператор PRINT
Оператор PRINT записывает данные в файл или отображает их на экране.
Оператор LPRINT печатает данные на принтере, подсоединённому к LPT1.
Синтаксис:
	PRINT [#ДЕСКРИПТОР%, ][ВЫРАЖЕНИЕ][{;|,}]
	LPRINT [ВЫРАЖЕНИЕ][{;|,}]
где
	ДЕСКРИПТОР% – номер открытого файла. Если дескриптор не указан, вывод производится на экран.
	ВЫРАЖЕНИЕ – список из одной или более числовых или символьных переменных, литералов или выражений с ними, которые должны быть выведены на экран или в файл.
	Разделитель «;» в конце строки означает, что следующий вывод будет осуществлён сразу же после последнего выведенного знака.
	Разделитель «,» в конце строки означает, что вывод начнётся с начала следующей зоны вывода. 
	Примечание. Зоны вывода имеют длину 14 символов, и их начало можно рассчитать по формуле 14*n+1, где n – целое число от 0 до 5, являющееся номером зоны.
Описание:
	Оператор PRINT выводит в файл, заданный дескриптором ДЕСКРИПТОР, значения литералов и переменных в соответствии с заданным форматом вывода (см. ниже). Если переменная ДЕСКРИПТОР опущена, то вывод осуществляется в стандартный поток вывода. Если СПИСОК_ВЫВОДА пуст, то в файл или поток вывода записывается символ «Перевод строки». Этот символ также записывается в конец выводимой строки, если ВЫРАЖЕНИЕ не заканчивается знаками «запятая» или «точка с запятой».
	При выводе литералов и переменных из «СПИСКА_ВЫВОДА» используется следующее форматирование. Если после переменной или литерала стоит знак «,» («запятая»), то вывод следующего значения осуществляется в той же строке с ближайшего начала зоны вывода, длиной 14 символов. Таким образом, осуществляется вывод наподобие табличных данных. Если же после переменной или литерала стоит знак «;» («точка с запятой»), то вывод осуществляется в той же строке со следующей позиции, без пропусков и форматирования. В этом случае вывод списка вывода похож на список вывода в PERL.
	Примечание: при выводе в QUICKBASIC также используются конструкции форматированного вывода данных (PRINT USING) и функция для задания точного отступа определённого количества символов (TAB), но эти функции не были популярны даже в эпоху расцвета QUICKBASIC, а теперь вообще практически не используются. Вместо них желательно использовать стандартное форматирование при выводе, формируя формат строки вывода средствами конкатенации.

PHP:
fputs, fwrite
	Функция выводит данную строку в файл, связанный с дескриптором.
Синтаксис:
	fwrite( ДЕСКРИПТОР, СТРОКА[, ДЛИНА] )
	fputs( ДЕСКРИПТОР, СТРОКА[, ДЛИНА] )
Описание:
	Функция выводит строку текста, заданную переменной СТРОКА, в файл на сервере или сокете, описанный параметром ДЕСКРИПТОР. Если указан параметр ДЛИНА, то выводится в файл не более символов, чем задано значением этого параметра. Функция возвращает число выведенных символов или false в случае ошибки вывода.
	Примечание: дескриптор должен быть предварительно открыт функцией fopen и закрыт после использования функцией fclose.
	Примечание: чтобы не записывать в файл лишнюю информацию, обработайте строку перед записью функцией trim для удаления начальных и концевых пробелов.
	Примечание: функция fputs является полным псевдонимом функции fwrite и добавлена в язык PHP для его совместимости с языком Си.

JAVASCRIPT:
console.log
Вывод данных на консоль.
Синтаксис:
	console.log( СТРОКА );
Описание:
	Функция выводит на консоль компьютера литерал, переменную или символьное выражение, заданное параметром СТРОКА.

E.1.3. Выводит форматированный список строковых данных в файл (printf);

PERL:
printf
Синтаксис:
	printf ДЕСКРИПТОР ФОРМАТ, СПИСОК
	printf ФОРМАТ, СПИСОК
Описание:
	Выводит форматированный список строковых данных в файл, связанный с дескриптором: ДЕСКРИПТОР. Если этот параметр опущен, то вывод осуществляется в стандартный файл вывода STDOUT, или текущий файл, установленный функцией select(). Параметр: ФОРМАТ — представляет собой строку, содержащую символы форматирования, полностью совпадающие с символами форматирования системной функции UNIX printf.
	Осуществляет форматированный вывод в файл, связанный с данным дескриптором (write, syswrite);
write
Синтаксис:
	write ДЕСКРИПТОР
	write 
Описание:
	Осуществляет форматированный вывод в файл, связанный с заданным дескриптором: ДЕСКРИПТОР, в соответствии с определённым форматом. Если параметр: ДЕСКРИПТОР — не задан, то выводит в стандартный файл вывода: STDOUT, — или в файл, выбранной функцией: select().

syswrite
Синтаксис:
	syswrite ДЕСКРИПТОР, СКАЛЯР, КОЛИЧЕСТВО[, СМЕЩЕНИЕ]
Описание:
	Эта функция подобна функции write(), за исключением того, что осуществляет небуферизованный ввод данных.

QUICKBASIC:
	На этом языке полного аналога функции форматированного вывода printf нет. Некоторое подобие форматированного вывода предоставляет функция PRINT USING, но она, как и функция format в PERL, имеет собственный синтаксис форматирования, описание которого находится за пределами данного справочника. C помощью функции PRINT USING в основном выводятся целые числа и числа с плавающей точкой.

PHP:
fprintf
Синтаксис:
	fprintf( ДЕСКРИПТОР, ФОРМАТ[, АРГУМЕНТЫ…] )
Описание:
	Функция выводит строку форматированного текста, заданную переменной ФОРМАТ, в файл на сервере или сокете, описанный параметром ДЕСКРИПТОР. В соответствии с заданной строкой ФОРМАТ выводятся значения переменных, заданные списком АРГУМЕНТЫ. Число аргументов должно быть таким же, какое указано в строке ФОРМАТ. Функция возвращает число выведенных символов или false в случае ошибки вывода.
	Примечание: строка ФОРМАТ указывает число выводимых знаков, число знаков после запятой, наличие знаков «плюс» и «минус» и выравнивание пробельных символов при выводе значений аргументов. Само собой разумеется, что такой вывод особо важен при выводе чисел и табличных данных, а при текстовом выводе функция fprintf не имеет преимуществ перед функцией fwrite.
	Примечание: дескриптор должен быть предварительно открыт функцией fopen и закрыт после использования функцией fclose.

Описание строки формата функций printf в PHP:
«%» – литерал, указывающий на значение формата:
Опциональный знак «+» или «-», указывающий, что знак у числа должен выводиться в любом случае. По умолчанию выводится только знак минус;
Опциональный знак заполнения пустых значений символом. По умолчанию значения заполняются пробельными символами.
Опциональный знак «-», указывающий, что будет осуществляться выравнивание по левому краю. По-умолчанию происходит выравнивание по правому краю.
Опциональное число длины (width) выводимой строки символов из числового значения. Недостающие значения заполняются символами пустых значений.
Опциональный знак точности выводимых значений, определяющий, сколько знаков после запятой выводится у числа. Лишние знаки обрезаются. Всегда выводится после знака длины числа и состоит из числа и предшествующего знака точки.
Обязательный знак, указывающий формат выводимого аргумента. Может принимать следующее значения:
* % – литеральный знак процента. Нет аргументов
* b – вывод как двоичное целое число;
* o – вывод как восьмеричное целое число;
* x – вывод как целое шестнадцатеричное число со строчной 'x';
* X – вывод как целое шестнадцатеричное число с прописной 'X';
* u – вывод как десятичного целого числа без знака;
* d – вывод как десятичного целого числа со знаком;
* f – вывод как числа с плавающей точкой с фиксированным количеством знаков после запятой;
* e – вывод как числа с плавающей точкой в научной нотации;
* c – вывод одиночного ASCII символа (добавлен для совместимости с Си);
* s – вывод значения аргумента как строки.
	Примечание: по мнению автора, «%s» самый бесполезная и ненужная строка формата, портящая стиль программирования. Вообще использовать знак формата «s» нужно только с модификаторами, например, «%-3s» – вывод трёх символов из строки с левосторонним выравниванием.

JAVASCRIPT:

E.1.4. Вывод «эха» в текущую позицию документа

PHP:
echo
Синтаксис:
	echo СТРОКА;
Описание:
	Оператор echo выводит в текущую позицию документа строку текста. Этой строкой может быть литерал, переменная или символьное выражение.

JAVASCRIPT:
document.write
Синтаксис:
	document.write( СТРОКА );
Описание:
	Данная конструкция на языке JAVASCRIPT выводит в текущую позицию HTML документа текст (HTML код), заданный значением СТРОКА. В качестве строки может использоваться переменная, литерал или выражение. Литерал при этом должен быть помещён в двойные или одинарные кавычки.
	Примечание: многие авторы не советуют использовать этот метод для вывода динамического значения на веб-страницу. Мотивируют они это тем, что тогда весь код выполняемого скрипта будет жёстко «привязан» к точке его вывода, что нарушает модульность динамических веб-страниц и делает их похожими на CGI программы. Авторы справочника согласны с этим, но оставляют право принимать решение за конкретным программистом.

<end node> 5P9i0s8y19Z
dt=Text
<node>
E.2. Чтение строк
1
E.2.1. Чтение заданного количества байтов в скалярную переменную (read, sysread);

PERL:
read
Синтаксис:
	read ДЕСКРИПТОР, СКАЛЯР, КОЛИЧЕСТВО[, СМЕЩЕНИЕ]

Описание:
	Чтение заданного количества байтов в скалярную переменную: СКАЛЯР – из файла, связанного с дескриптором: ДЕСКРИПТОР. Возвращает истинное количество прочитанных байтов, 0 в случае конца файла и неопределённое значение: undef — при возникновении ошибки. Необязательный параметр СМЕЩЕНИЕ задаёт позицию в строковой переменной: СКАЛЯР, начиная с которой в неё вставляются прочитанные байты (по умолчанию с начала строки данных скалярной переменной).

sysread
Синтаксис:
	sysread ДЕСКРИПТОР, СКАЛЯР, КОЛИЧЕСТВО[, СМЕЩЕНИЕ]
Описание:
	Функция подобна функции: read() за исключением того, что осуществляет небуферизованный ввод данных.

QUICKBASIC:
INPUT$
Функция возвращает строку символов, прочитанную из указанного файла.
Синтаксис:
	INPUT$(ЧИСЛО[, #ДЕСКРИПТОР%] )
Описание:
	Функция читает из файла с номером ДЕСКРИПТОР% заданное ЧИСЛО символов и записывает её в символьную переменную. Если параметр ДЕСКРИПТОР опущен, то строка читается из стандартного потока ввода (клавиатуры);

PHP:
fread
Синтаксис:
	СТРОКА = fread( ДЕСКРИПТОР, ДЛИНА )
Описание:
	Функция fread читает строку данных заданной длинной ДЛИНА из файла, заданного переменной ДЕСКРИПТОР, и возвращает строку данных. Данные из файла читаются до тех пор, пока или не будет прочитано заданное число символов, или не встретится символ «конец файла».
	Примечание: Для файлов, открытых удалённо, данные читаются до тех пор, пока установлено устойчивое соединение, и в случае перебоев на линии файл может прочитаться не полностью, раньше, чем прочитано заданное количество символов или встретится символ «конец файла».
	Примечание: Перед тем, как осуществить операцию чтения, дескриптор должен быть определён. То есть файл должен быть открыт для чтения функцией fopen, и закрыт после использования функцией fclose. Перед выполнением операции чтения и во время неё хороший тон – проверить, действительно ли произошло чтение данных, и нет ли ошибки ввода-вывода.

E.2.2. Оператор чтения из потока данных

PERL:
Оператор «Ромб» («<>»).
Синтаксис:
	СКАЛЯР = <>
	МАССИВ = <>
	СКАЛЯР = <ДЕСКРИПТОР>
	МАССИВ = <ДЕСКРИПТОР>
Описание:
	В Скалярном контексте функция читает одну строку из файла, описанного переменной ДЕСКРИПТОР, и присваивает её значению переменной СКАЛЯР. В списковом контексте оператор читает все строки из файла, и записывает их в переменную МАССИВ. Если прочитать файл невозможно, ошибка не генерируется. Поэтому проверять файл на возможность чтения нужно функциями feof и ferror.
	Если переменная «ДЕСКРИПТОР» опущена, делается попытка прочитать файлы, имеющие имена, совпадающие с именами указанных аргументов вызываемого сценария PERL. Если же и он пуст, происходит чтение строк из стандартного потока ввода.
	Примечание: дескриптор должен быть предварительно открыт функцией fopen и закрыт после использования функцией fclose.
	Оператор «Ромб» – мощное средство неформатированного ввода в PERL, к которому надо привыкнуть после других языков и которое надо употреблять правильно для достижения его максимальной эффективности программ на PERL.

QUICKBASIC:
Оператор INPUT
INPUT
Оператор INPUT читает значения с клавиатуры или файла. Оператор LINE INPUT читает строку символов длиной до 255 символов с клавиатуры или файла.
Синтаксис:
	INPUT [;] [«ЗАПРОС«{;|,}] СПИСОК_ПЕРЕМЕННЫХ
	LINE INPUT [;][«ЗАПРОС»;] ПЕРЕМЕННАЯ$
	INPUT #ДЕСКРИПТОР%, СПИСОК_ПЕРЕМЕННЫХ
	LINE INPUT #ДЕСКРИПТОР%, ПЕРЕМЕННАЯ$
где
	ЗАПРОС - необязательная литеральная строка, которая высвечивается перед тем, как нужно ввести данные. Точка с запятой после запроса добавляет знак вопроса после строки запроса.
	СПИСОК_ПЕРЕМЕННЫХ – одна или несколько переменных, разделённых запятыми, в которые вводятся данные с клавиатуры или читаются символы из текстового файла. Переменная может иметь до 40 символов и начинаться с буквы. Допустимые символы в переменной A-Z,0-9 и «.».
	ПЕРЕМЕННАЯ$ – строковая переменная, которая принимает в себя строку символов, введённых из клавиатуры или прочитанной из файла.
	ДЕСКРИПТОР% – номер открытого файла
Описание:
	INPUT использует запятые в качестве разделителей между операндами;
	LINE INPUT читает все символы вплоть до возврата каретки (до нажатия клавиши «Enter»), и записывает её в переменную типа «строка» для дальнейшей обработки в программе. Никаких форматных преобразований над строкой не осуществляется;
	При вводе с клавиатуры, точка с запятой сразу же после ключевого слова INPUT оставляет текстовый курсор на той же строке после того, как после ввода значения пользователь нажал клавишу «Enter». По умолчанию курсор передвигается в начало новой строки. Это позволяет средствами QUICK BASIC эмулировать ввод в формах а-ля GUI;
	Примечание: При вводе из стандартного потока ввода на экране, в текущей позиции появляется приглашение в виде знака вопроса. После этого приглашения необходимо ввести значение переменной и нажать клавишу «Enter». Если ввод не закончен, в новой строке опять появится знак вопроса. Поэтому, комбинируя вывод значений при помощи оператора PRINT СТРОКА; и INPUT ПЕРЕМЕННАЯ можно получать диалоговые формы ввода значений для их обработки.
	Примечание: При вводе значений из текстового файла оператор читает строку текста, самостоятельно пытаясь преобразовать форматы данных числовых переменных. Если ему это не удаётся, программа аварийно завершается. Поэтому при вводе из файла числовых значений в строке оператора INPUT нужно указывать столько переменных, сколько их записано в строке текстового файла.
	Примечание: При вводе неформатированных символьных данных авторы советуют вместо конструкции: «INPUT ПЕРЕМЕННАЯ$»  использовать конструкции «LINE INPUT ПЕРЕМЕННАЯ$» или «ПЕРЕМЕННАЯ$ = INPUT$( ЧИСЛО )», поскольку их работа более стабильная и предсказуемая.
	Примечание: Учтите, что в Quick Basic длина строки символов ограничена 255 символами! Это ограничение снято в Visual Basic, за счёт изменения алгоритма представления строк.
	Примечание: Оператор LINE INPUT на языке QUICKBASIC является аналогом оператора «Ромб» языка Perl в скалярном контексте.
	Примечание: Оператору LINE INPUT в GWBASIC существовал парный оператор PRINT LINE, который, однако, не имел никаких преимуществ перед оператором PRINT и вскоре был исключён из спецификации BASIC корпорации Microsoft.

PHP:
file
Синтаксис:
	МАССИВ = file( ИМЯ_ФАЙЛА )
Описание:
	Функция file читает текстовый файл, расположенный в каталоге на сервере, полное имя которого (вместе с путём) приводится в переменной ИМЯ_ФАЙЛА, построчно, и записывает полученный массив строк в переменную МАССИВ. Данная функция похожа на оператор «Ромб» в PERL, но работает только с файлами и выдаёт результат только в списковом контексте.
	Примечание: после чтения этого списка из файла обычно производят удаление начальных и концевых пробелов (функцией trim) и производят замену символа перевода строки на символ «\0». Дело в том, что прочитанный файл чаще всего представляет собой набор строк, разделённый символом «новая строка», а для работы со строками нужна строка в Си-формате (заканчивающаяся символом «бинарный ноль»).

E.2.3. Оператор форматированного ввода
PHP:
fscanf, sscanf
Синтаксис:
	list( АРГУМЕНТЫ ) = sscanf( СТРОКА, ФОРМАТ[, АРГУМЕНТЫ] )
	list( АРГУМЕНТЫ ) = fscanf( ДЕСКРИПТОР, ФОРМАТ[, АРГУМЕНТЫ] )
	Примечание: список аргументов указывается или в левой, или в правой части присваивания.
Описание:
	Функция sscanf обратная функции sprintf. Она читает данные из строки СТРОКА, выделяя значения переменной АРГУМЕНТЫ в соответствии со строкой ФОРМАТ, и присваивает эти значения переменным. Описание идентификаторов ФОРМАТ такое же, как и в функции fprintf.
	Функция fscanf аналогична функции sscanf, только ввод осуществляется не из строки, а из файла с указанным дескриптором. Этот дескриптор должен быть предварительно открыт, а после использования в операциях ввода-вывода – закрыт соответствующими функциями.
	Примечание: функции fprintf и fscanf надо использовать совместно, соответственно для создания и чтения форматированного текстового файла, генерируемого программой или скриптом, для минимизации возможных ошибок.

<end node> 5P9i0s8y19Z
dt=Text
<node>
E.3. Тест на конец файла
1
E.3.1. Тест на конец файла EOF;

PERL:

eof
Синтаксис:
	eof ДЕСКРИПТОР
	eof()
	eof
Описание:
	Тестирует файл, ассоциированный с дескриптором: ДЕСКРИПТОР, на конец файла. Возвращает 1, если следующая операция чтения из файла возвратит признак конца файла. Употреблённая без параметров функция использует в качестве параметра файл, к которому применялась последняя операция чтения. Если используется с пустыми круглыми скобками: eof(), то тестирует на конец файла самый последний файл из списка файлов, переданный в сценарий через командную строку.

QUICKBASIC:
eof
Синтаксис:
	EOF( ДЕСКРИПТОР% )
Описание:
	Функция проверяет поток, ассоциированный с номером файла ДЕСКРИПТОР%, на признак конца файла. Данная функция возвращает значение True (не ноль), если достигнут конец файла.
	Примечание: обратите внимание, что номер файла ДЕСКРИПТОР% для данной функции записывается без предшествующего знака «решётка» («#»).

PHP:
feof
Синтаксис:
	feof( ДЕСКРИПТОР )
Описание:
	Данная функция возвращает значение True, если указатель файла с именем ДЕСКРИПТОР находится на его конце, или во время последней операции ввода вывода произошла ошибка, или при операциях ввода-вывода удалённых файлов возник тайм-аут соединения.

<end node> 5P9i0s8y19Z
dt=Text
<node>
E.4. Следующий символ из файла
1
Возвращает следующий символ из файла, открытого для чтения и ассоциированного с дескриптором (getc);

PERL:

getc
Синтаксис:
	getc ДЕСКРИПТОР
	getc
Описание:
	Возвращает следующий символ из файла, открытого для чтения и ассоциированного с дескриптором: ДЕСКРИПТОР. Если достигнут конец файла или произошла ошибка чтения, возвращает неопределённое значение: undef. Если используется без имени дескриптора, то читается файл стандартного ввода STDIN.

PHP:
fgetc
Синтаксис:
	СИМВОЛ = fgetc( ДЕСКРИПТОР );
Описание:
	Функция возвращает очередной символ из файла, на который указывает переменная ДЕСКРИПТОР. Функция возвращает FALSE, если достигнут конец файла.
	Примечание: переменная ДЕСКРИПТОР должна быть определена функциями fopen или fsockopen (для удалённых сокетов).

<end node> 5P9i0s8y19Z
dt=Text
<node>
E.5. Вывод всплывающих сообщений
1
Эта функция используется для отображения панели сообщений (аналог функции MessageBox в Windows API);

JAVASCRIPT:
alert.
Синтаксис:
	alert( СТРОКА );
где СТРОКА – символьный литерал, переменная или выражение, выводимое на экран компьютера.
Описание:
	Применяется для уведомления пользователя, работающего с веб-браузером.

Confirm.
Синтаксис:
	confirm( СТРОКА );
где СТРОКА – символьный литерал, переменная или выражение, выводимое на экран компьютера.
Описание:
	Функция применяется для выбора пользователем одного из двух вариантов ответа «Да/Нет». Соответственно Confirm возвращает значение true/false.

<end node> 5P9i0s8y19Z
dt=Text
<node>
E.6. Ввод данных из диалогового окна
1
Использование информации от пользователя, полученной из диалоговой панели (InputBox);

JAVASCRIPT:
Prompt.
Синтаксис:
	prompt(  ВОПРОС_ЗАПРОС, ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ );
где ВОПРОС_ЗАПРОС и ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ – текстовые литералы, переменные или выражения.
Описание:
	Применяется для ввода пользователем значения. При нажатии «OK» возвращается введённое значение, в случае «Cancel» возвращается значение null.

<end node> 5P9i0s8y19Z
dt=Text
<node>
E.7. Функции вывода непосредственно в DOM (=)
1
Данные функции предназначены для формирования текста и изменения характеристик веб-документа непосредственно из объектной модели документа («Document Object Model», DOM). Эти функции работают на языках VBScript и JavaScript, и отсутствуют в штатных средствах языков Perl и PHP.

Ссылка на родительский объект в документе находится в его свойстве parentNode, а все его дочерние узлы – в массиве childNodes[]. Количество объектов у текущего узла можно получить с помощью функции childNodes.length.

Первый дочерний узел отображается как node.childNodes[0] (где node – имя переменной, имеющей тип объекта DOM и содержащей в себе текущее звено), или node.firsfChild. Последний дочерний узел задаётся как node.childNodes[node.childNodes.length - 1] или node.lastChild.

Свойство node.nextSibling выдаёт следующего «брата» данного узла, имеющего общего с ним родителя.

Для непосредственного доступа к тегам можно использовать два специальных свойства:

document.documentElement – для доступа к корневому узлу документа;
document.body – ждя доступу к элементу <body> текущего элемента.

Любой объект node содержит в себе следующие свойства:

* node.innerHTML - внутреннее текстовое значение HTML элемента x;
* node..nodeName - имя элемента node. Этот атрибут доступен только для чтения;
* node.nodeValue - значение node. Это значение или недоступно, или доступно для чтения и записи;
* node.parentNode - родительский узел для node. Этот атрибут доступен только для чтения;
* node.childNodes - массив дочерних узлов для node. Доступен только для чтения, а изменяется другими функциями;
*node.attributes - массив узлов атрибутов node;
* node.nodeType – свойство, доступное для чтения, определяет тип данного узла.

	Свойство nodeName указывает на имя узла. Это свойство имеет следующие особенности:

* Свойство nodeName предназначено только для чтения;
* Свойство nodeName узла элемента точно соответствует имени тега;
* Свойство nodeName узла атрибута соответствует имени атрибута;
* Свойство nodeName текстового узла всегда равно #text
* Свойство nodeName узла документа всегда равно #document
	Замечание: nodeName всегда содержит имя тега HTML элемента в верхнем регистре.

	Свойство nodeValue указывает на значение узла. Это свойство имеет следующие особенности:

* Свойство nodeValue узла элемента не определено;
* Свойство nodeValue текстового узла указывает на сам текст;
* Свойство nodeValue узла атрибута указывает на значение атрибута.

	Свойство nodeType возвращает тип узла. Это свойство предназначено только для чтения.
	Наиболее важными типами узлов являются следующие (Тип элемента=Тип узла):
* Element=1
* Attribute=2
* Text=3
* Comment=8
* Document=9

Проверив тип узла, можно определить, поддерживает ли данный узел изменение своих элементов или нет.

Функция document.createElement – создаёт HTML тег, но не помещает его в текст;

Функция document.createTextNode – заполняет текстовое содержимое html-документа, которое также не отображается в документе;

Добавление элемента в документ можно сделать одним из двух способов: используя appendChild, или используя insertBefore. Функция appendChild добавляет наш элемент в конце существующего элемента (именно поэтому она называет append). Если элемент нужно добавить в середине существующего элемента, нам нужно использовать insertBefore, например:

links[i].parentNode.insertBefore(span, links[i].nextSibling);

Синтаксис функций добавления элементов
	node.appendChild(СОЗДАННЫЙ_ЭЛЕМЕНТ);
	node.insertBefore( СОЗДАННЫЙ_ЭЛЕМЕНТ, СУЩЕСТВУЮЩИЙ_УЗЕЛ),
где СОЗДАННЫЙ_ЭЛЕМЕНТ и СУЩЕСТВУЮЩИЙ_УЗЕЛ имеют тип «Узловой объект DOM».
	Узловой объект, соответствующий HTML элементу, поддерживает следующие методы:

* node.getElementById(id) - получить элемент с указанным id;
* node.getElementsByTagName(name) - получить все элементы с указанным именем тега (name) (будет сформирован массив узловых объектов);
* node.appendChild(x) - вставить дочерний узел x для node;
* node.removeChild(x) - удалить дочерний узел x для node.
	Вызовы этих методов можно комбинировать в цепочки любой длины.

	Таким образом, для того, чтобы прочитать любое значение элемента, необходимы две операции присваивания:

var node = document.<полный путь по DOM, необходимый для идентификации элемента>;
var value = node.nodeValue;

И столько же операций присваивания для записи значений в HTML документ:

var node = document.<полный путь по DOM, необходимый для идентификации элемента>;
var node.nodeValue = value;

На языке Visual Basics Script этот пример будет выглядеть более тяжеловесным:

Dim  node AS Object
Dim value
node = document.<полный путь по DOM, необходимый для идентификации элемента>
value = node.nodeValue

Dim  node AS Object
Dim value
node = document.<полный путь по DOM, необходимый для идентификации элемента>;
node.nodeValue = value;

	Примечание: вместо свойства node.nodeValue, как более капризного, часто используют свойство node.innerHTML, который позволяет вставить в HTML документ гораздо больше текста, включая дополнительные теги.

<end node> 5P9i0s8y19Z
dt=Text
<node>
E.8. Установка и чтение текущей позиции файла
1
Устанавливает текущую позицию файла, связанного с дескриптором (seek, sysseek);

PERL:

seek
Синтаксис:
	seek ДЕСКРИПТОР, ПОЗИЦИЯ, ПОЛОЖЕНИЕ
Описание:
	Устанавливает текущую позицию файла, связанного с дескриптором: ДЕСКРИПТОР, смещённой на заданное параметром: ПОЗИЦИЯ — число байтов относительно положения, заданного параметром: ПОЛОЖЕНИЕ (0 – начало файла, 1 – текущая позиция, 2 – конец файла). Возвращает 1 при успешном выполнении операции позиционирования и 0 в противном случае.

sysseek
Синтаксис:
	sysseek ДЕСКРИПТОР, СМЕЩЕНИЕ, ПОЛОЖЕНИЕ
Описание:
	Эта функция подобна функции seek(), за исключением того, что осуществляет небуферизованный ввод данных.

Возвращает текущую позицию в файле (tell);

PERL:

tell
Синтаксис:
	tell [ДЕСКРИПТОР]
Описание:
	Возвращает текущую позицию в файле, связанном с дескриптором: ДЕСКРИПТОР. Если параметр опущен, то подразумевается файл, для которого была сделана последняя операция чтения.

<end node> 5P9i0s8y19Z
dt=Text
<node>
E.9. Вывод  в стандартный поток ошибок
1
Выводит в стандартный поток ошибок значение элемента списка (warn);

PERL:

warn
Синтаксис:
	warn СПИСОК
	warn
Описание:
	Выводит в стандартный поток ошибок STDERR значения элемента списка, определяемого параметром: СПИСОК. Если он пуст, то выводится содержимое специальной переменной: $@ (обычно после выполнения функции: eval()), добавляя строку: «\t…caught», а если и она пуста, то выводит сообщение: «Warning: Something's wrong».

<end node> 5P9i0s8y19Z
dt=Text
<node>
E.10. Чтение в двоичном режиме
1
1. Подготавливает файл для чтения и/или записи в двоичном, а не в тестовом режиме (binmode);

Примечание. Эта функция актуальна для операционных систем MS-DOS, Windows, etc., которая разделяет текстовый и двоичный режим открытия файлов. Операционных системах на основе UNIX не делают разницы в операциях чтения-записи для таких файлов.

PERL:

binmode
Синтаксис:
	binmode ДЕСКРИПТОР

Описание:
	Подготавливает файл, ассоциированный с дескриптором ДЕСКРИПТОР, для чтения и записи в двоичном, а не текстовом режиме. Эта функция необходима для операционных систем MS-DOS и др., которые различают двоичный и текстовый режим. В UNIX эта функция не имеет смысла.

<end node> 5P9i0s8y19Z
dt=Text
<node>
E.11. Генерирование исключительных ситуаций
1
2. Функция для генерирования исключительных ситуаций с выводом предупреждающих сообщений (на консоль)

PERL:

die
Синтаксис:
	die СПИСОК

Описание:
	Вне тела функции eval выводит значения элементов списка, заданных параметром: СПИСОК, в стандартный файл ошибок STDERR и завершает выполнение сценария Perl с текущим значением специальной переменной $!. Если используется в теле функции eval(), то сообщение об ошибке помещается в переменную: $@, и функция eval завершается неопределённым значением. Такое поведение позволяет использовать функцию: die – для генерирования исключительных ситуаций.

<end node> 5P9i0s8y19Z
dt=Text
<node>
E.12. Номер дескриптора (в Perl fileno)
1
fileno
Синтаксис:
	fileno ДЕСКРИПТОР

Описание:
	Возвращает числовой системный дескриптор для файла, ассоциированного с дескриптором Perl: ДЕСКРИПТОР.

<end node> 5P9i0s8y19Z
dt=Text
<node>
E.13. Изменение длины файла
1
Изменение длины файла, связанного с дескриптором (truncate);
PERL:

truncate
Синтаксис:
	truncate ДЕСКРИПТОР, ДЛИНА
	truncate ВЫРАЖЕНИЕ, ДЛИНА
Описание:
	Изменяет длину файла, связанного с дескриптором: ДЕСКРИПТОР — или значением параметра: ВЫРАЖЕНИЕ, устанавливая его равным значению параметра ДЛИНА. Размер файла может быть увеличен или уменьшен.

<end node> 5P9i0s8y19Z
