<Treepad version 3.0>
dt=Text
<node>
D. Функции открытия и закрытия файлов
0
Содержание

D.1. Открытие файла
D.2. Закрытие файла
D.3. Блокировка файла
D.4. Назначение файла стандартным потоком вывода по-умолчанию

<end node> 5P9i0s8y19Z
dt=Text
<node>
D.1. Открытие файла
1
D.1.1. Открытие файла (open);

PERL:
open
Синтаксис:
	open ДЕСКРИПТОР, РЕЖИМ, ИМЯ_ФАЙЛА
	open ДЕСКРИПТОР[,ВЫРАЖЕНИЕ]
Описание:
	Первая форма открывает файл, имя которого является значением параметра: ИМЯ_ФАЙЛА, в режиме, заданным строковым значением параметра: РЕЖИМ, и связывает его с дескриптором, определённым параметром: ДЕСКРИПТОР. При использовании второй формы в случае присутствия параметра выражение оно должно вычисляться как строка, в которой определены и режим открытия файла, и его имя. Если во второй форме параметр: ВЫРАЖЕНИЕ не задан, то вместо него используется содержимое скалярной переменной с тем же именем, что и дескриптор: ($ДЕСКРИПТОР).

Переменная РЕЖИМ может принимать следующие значения:
«<» – файл открывается для чтения из него данных;
«>» – файл открывается для записи в него данных. Старое содержимое файла при этом уничтожается;
«>>» – файл открывается для добавления в его конец данных. Старые его данные остаются на месте».

Как видим, режим открытия файла полностью повторяет символы для переадресации ввода-вывода данных.

QUICKBASIC:

VBSCRIPT:

Данный язык не использует, по соображениям безопасности, ввод и вывод в файлы, поэтому данная функция в нём отсутствует.

PHP:
fopen
Синтаксис:
	ДЕСКРИПТОР = fopen( ИМЯ_ФАЙЛА, РЕЖИМ[, ИСПОЛЬЗ_ВНУТРЕННИЙ_ПУТЬ[, КОНТЕКСТ]] )
Описание:
	Данная функция создаёт переменную ДЕСКРИПТОР, которая далее будет использоваться во всех операциях ввода-вывода в файл.
	ИМЯ_ФАЙЛА – полное или краткое имя файла при его открытии.  Файл может располагаться локально, а может также располагаться на удалённой машине. В последнем случае необходимо указывать его URI.
	Переменная РЕЖИМ может принимать одно из следующих значений:

* 'r'. Файл открывается только для чтения. Указатель устанавливается на начало файла.
* 'r+'. Файл открывается для чтения и записи. Указатель устанавливается на начало файла.
* 'w'. Файл устанавливается только для записи. Указатель устанавливается в первую позицию файла, при этом файл очищается. Если файл не существует, делается попытка создать его.
* 'w+'. Файл устанавливается для чтения и записи. Указатель устанавливается в первую позицию файла, при этом файл очищается. Если файл не существует, делается попытка создать его.
* 'a'. Файл устанавливается только для записи. Указатель устанавливается в последнюю позицию файла. Если файл не существует, делается попытка создать его.
* 'a+'. Файл устанавливается для чтения и записи. Указатель устанавливается в последнюю позицию файла. Если файл не существует, делается попытка создать его.
* 'x'. Файл устанавливается только для записи. Указатель устанавливается в первую позицию файла. Если файл уже существует, функция возвращает значение FALSE и генерирует ошибку уровня E_WARNING. Если файла не существует, делается попытка создания его. Данный режим работает только с локальными файлами.
* 'x+'. Файл устанавливается для чтения и записи. Указатель устанавливается в первую позицию файла. Если файл уже существует, функция возвращает значение FALSE и генерирует ошибку уровня E_WARNING. Если файла не существует, делается попытка создания его. Данный режим работает только с локальными файлами.
Дополнительно к любому из этих знаков режима может быть записан модификатор «t» (например, 'wt'), означающий, что символы конца строки будут соответствовать правилам Windows (вместо одного символа '\n' в конце строки будут автоматически дописываться '\n\r')? и эти преобразования будут проведены по-умолчанию. Если локальный файл используется только внутри системы, модификатор никак не влияет на операции ввода-вывода. Однако если файл предназначен для использования в UNIX платформах, настоятельно рекомендуется вместо модификатора 't' использовать модификатор 'b'.
	Опциональный параметр ИСПОЛЬЗ_ВНУТРЕННИЙ_ПУТЬ может быть установлен в TRUE, если вы хотите также искать файл во вложенных путях, например, определённых переменной path.
	Функция возвращает значение переменной ДЕСКРИПТОР. Если вызов функции окончится неудачно, функция вернёт значение FALSE и ошибку уровня E_WARNING. Вы можете использовать знак @ чтобы подавить вывод ошибок этой функции.
	Примечание: на платформе Windows для разделения каталогов нужно использовать в литералах двойной бэкслеш «\\», поскольку одинарный бэкслеш означает ввод специального символа. Кроме того, начиная с Windows Vista, Вы можете разделять каталоги обычным '/', а не обратным слешем. Например, данные пути ведут к одному и тому же файлу:
«c:\\UIL\\readme.txt»
«C:/util/readme.txt»
Как Вы должны знать, файловая система NTFS не различает регистра символов в именах файлов и каталогов. Хотя она сохраняет этот регистр файлом и использует его, например, при копировании в файловые системы UNIX.

JAVASCRIPT:

Данный язык не использует, по соображениям безопасности, ввод и вывод в файлы, поэтому данная функция в нём отсутствует.

<end node> 5P9i0s8y19Z
dt=Text
<node>
D.2. Закрытие файла
1
D.2.1. Закрывает файл либо программный канал, ассоциированный с дескриптором (close);

PERL:
close
Синтаксис: 
	close [ДЕСКРИПТОР]
	close
Описание:
	Закрывает файл либо программный канал, ассоциированный с дескриптором, заданным параметром ДЕСКРИПТОР. Возвращает булево значение «истина», если успешно очищен буфер и закрыт системный файловый дескриптор. Без параметра закрывает файл или программный канал, ассоциированный с текущим дескриптором, выбранным функцией select().

QUICKBASIC:

VBSCRIPT:

Данный язык не использует, по соображениям безопасности, ввод и вывод в файлы, поэтому данная функция в нём отсутствует.

PHP:
fclose
Синтаксис:
	fclose( ДЕСКРИПТОР )
Описание:
	Функция закрывает ДЕСКРИПТОР, ассоциированный с файлом в операциях ввода-вывода. После закрытия этого дескриптора операции ввода-вывода с файлом становятся невозможными до его нового открытия.
	ДЕСКРИПТОР должен быть предварительно открыт функцией fopen или fsockopen.
	Функция возвращает TRUE в случае успеха и FALSE в случае неудачи.
	Примечание. После окончания работы со скриптами все открытые в них дескрипторы закрываются автоматически. Однако злоупотреблять этой особенностью не стоит: это плохой стиль программирования чреват ошибками.

JAVASCRIPT:

Данный язык не использует, по соображениям безопасности, ввод и вывод в файлы, поэтому данная функция в нём отсутствует.

<end node> 5P9i0s8y19Z
dt=Text
<node>
D.3. Блокировка файла
1
Блокирует файл, связанный с дескриптором, для выполнения другими сценариями (flock);

PERL:

flock
Синтаксис:
	flock ДЕСКРИПТОР, ОПЕРАЦИЯ

Описание:
	Блокирует файл, связанный с дескриптором: ДЕСКРИПТОР, для выполнения другими пользователями операций, определённых параметром: ОПЕРАЦИЯ, с допустимыми числовыми значениями 1, 2, 8, соответствующим именованным константам: LOCK_SH, LOCK_EX, LOCK_UN — из стандартного модуля: Fcntl. Возвращает «истина» в случае успешной блокировки файла, и «ложь» в противном случае. Блокирует полностью весь файл, а не только отдельные записи.

<end node> 5P9i0s8y19Z
dt=Text
<node>
D.4. Назначение файла стандартным потоком вывода по-умолчанию
1
Возвращает дескриптор текущего файла вывода (select);

PERL:

select
Синтаксис:
	select [ДЕСКРИПТОР]
Описание:
	Возвращает дескриптор текущего установленного файла вывода. Если задан параметр: ДЕСКРИПТОР, делает файл, связанный с данным дескриптором, текущим файлом вывода. Это приводит к тому, что функции print и write без дескрипторов будет осуществлять вывод именно в этот файл.

<end node> 5P9i0s8y19Z
